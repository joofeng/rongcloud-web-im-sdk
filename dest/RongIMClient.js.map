{"version":3,"file":"RongIMClient.js","sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 87ec4eedf9606d369449","webpack:///./src/IMClient/entry.js","webpack:///./src/IMClient/RongIMClient.js","webpack:///./src/tool.js","webpack:///./src/mapping.js","webpack:///./src/IMClient/shim.js","webpack:///./src/core/bridge.js","webpack:///./src/core/client.js","webpack:///./src/message/MessageEntity.js","webpack:///./src/message/Message.js","webpack:///./src/message/msgEnum.js","webpack:///./src/enum.js","webpack:///./src/binary.js","webpack:///./src/core/messageHandler.js","webpack:///./src/core/messageParser.js","webpack:///./src/core/messageCallback.js","webpack:///./src/io/factory.js","webpack:///./src/io/websocket.js","webpack:///./src/io/base.js","webpack:///./src/Message/throttleStream.js","webpack:///./src/Message/Message.js","webpack:///./src/Message/msgEnum.js","webpack:///./src/Message/MessageEntity.js","webpack:///./src/message/throttleStream.js","webpack:///./src/io/polling.js","webpack:///./src/core/channel.js","webpack:///./src/md5.js","webpack:///./src/ready.js","webpack:///./src/IMClient/affiliatedMessage.js","webpack:///./src/IMClient/coustomMessage.js","webpack:///./src/IMClient/IMEnum.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"RongIMClient\"] = factory();\n\telse\n\t\troot[\"RongIMClient\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 87ec4eedf9606d369449\n **/","var RongIMClient = require('./RongIMClient');\nvar tool = require('../tool');\nvar mapping = require('../mapping');\nrequire('../ready');\nrequire('./affiliatedMessage');\nrequire('./coustomMessage');\nrequire('./IMEnum');\n//版本号\nRongIMClient.version = \"0.9.10\";\n// RongIMClient.connect静态方法，执行连接操作\nRongIMClient.connect = function (d, a) {\n    if (!RongIMClient.getInstance) {\n        throw new Error(\"please init\")\n    }\n    //判断protobuf文件加载是否完成\n    if (global.Modules) {\n        //完成执行connect方法\n        RongIMClient.getInstance().connect(d, a);\n    } else {\n        //把token、回调函数赋值给RongIMClient.connect，让protobuf文件自己来触发连接操作\n        RongIMClient.connect.token = d;\n        RongIMClient.connect.callback = a\n    }\n};\n//是否有未接收的消息，jsonp方法\nRongIMClient.hasUnreadMessages = function (appkey, token, callback) {\n    tool.jsonp(\"http://api.cn.rong.io/message/exist.js?appKey=\" +\n        encodeURIComponent(appkey) + \"&token=\" + encodeURIComponent(token),\n        \"callBack\", function (x) {\n            callback.onSuccess(!!+x.status);\n        }, function () {\n            callback.onError(RongIMClient.callback.ErrorCode.UNKNOWN_ERROR);\n        });\n};\n//初始化。生成一个RongIMClient单例\nRongIMClient.init = function (d, conf) {\n\n    mapping.WEB_SOCKET_FORCE_FLASH = !!conf.WEB_SOCKET_FORCE_FLASH;\n    mapping.WEB_XHR_POLLING = !!conf.WEB_XHR_POLLING;\n    mapping.FORCE_LOCAL_STORAGE = !!conf.FORCE_LOCAL_STORAGE;\n\n    var instance = null;\n    RongIMClient.getInstance === undefined && (RongIMClient.getInstance = function () {\n        if (instance == null) {\n            instance = new RongIMClient(d);\n        }\n        return instance;\n    });\n};\n//注册自定义消息\nRongIMClient.registerMessageType = function (regMsg) {\n    if (!RongIMClient.getInstance) {\n        throw new Error(\"unInitException\")\n    }\n    if (\"messageType\" in regMsg && \"objectName\" in regMsg && \"fieldName\" in regMsg) {\n        mapping.registerMessageTypeMapping[regMsg.objectName] = regMsg.messageType;\n        var temp = RongIMClient[regMsg.messageType] = function (c) {\n            RongIMClient.RongIMMessage.call(this, c);\n            RongIMClient.MessageType[regMsg.messageType] = regMsg.messageType;\n            this.setMessageType(regMsg.messageType);\n            this.setObjectName(regMsg.objectName);\n            for (var i = 0; i < regMsg.fieldName.length; i++) {\n                var item = regMsg.fieldName[i];\n                this[\"set\" + item] = (function (na) {\n                    return function (a) {\n                        this.setContent(a, na);\n                    }\n                })(item);\n                this[\"get\" + item] = (function (na) {\n                    return function () {\n                        return this.getDetail()[na];\n                    }\n                })(item);\n            }\n        };\n        tool.inherit(temp, RongIMClient.RongIMMessage, true);\n    } else\n        throw new Error(\"registerMessageType:arguments type is error\");\n};\n//设置连接状态监听器\nRongIMClient.setConnectionStatusListener = function (a) {\n    if (!RongIMClient.getInstance) {\n        throw new Error(\"unInitException\")\n    }\n    RongIMClient.getInstance().setConnectionStatusListener(a)\n};\nwindow.RongIMClient = RongIMClient;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/IMClient/entry.js\n ** module id = 0\n ** module chunks = 0\n **/","var tool = require('../tool');\nvar shim = require('./shim');\nvar bridge = require('../core/bridge');\nvar mapping = require('../mapping');\nvar messageParser = require('../core/messageParser');\nvar listenerList = [];\nvar conversationList = new shim.list();\nvar sessionStore = shim.sessionStore;\nvar bridgeInstance = null;\nvar self = null;\nvar C2S = shim.C2S;\nvar LimitableMap = shim.LimitableMap;\n//历史消息映射，key为会话类型，value为服务器的topic\nvar HistoryMsgType = {\n    \"4\": \"qryPMsg\",\n    \"1\": \"qryCMsg\",\n    \"3\": \"qryGMsg\",\n    \"2\": \"qryDMsg\",\n    \"5\": \"qrySMsg\"\n}; //缓存拉取历史消息的时间戳，\nvar lastReadTime = new LimitableMap();\n//sdk外部逻辑核心类\nfunction RongIMClient(_appkey) {\n    this.appkey = _appkey;\n    self = this;\n}\nRongIMClient.prototype.clearTextMessageDraft = function (c, e) {\n    return sessionStore.removeItem(c + \"_\" + e)\n};\n//得到草稿\nRongIMClient.prototype.getTextMessageDraft = function (c, d) {\n    return sessionStore.getItem(c + \"_\" + d)\n};\n//保存草稿\nRongIMClient.prototype.saveTextMessageDraft = function (d, e, c) {\n    return sessionStore.setItem(d + \"_\" + e, c)\n};\n////得到io通道对象\nRongIMClient.prototype.getIO = function () {\n    return bridgeInstance.context.channel;\n};\n//连接服务器\nRongIMClient.prototype.connect = function (c, e) {\n    bridgeInstance = new bridge(this.appkey, c, e);\n    for (var d = 0; d < listenerList.length; d++) {\n        bridgeInstance['setListener'](listenerList[d])\n    }\n    listenerList = [];\n};\n//断开连接\nRongIMClient.prototype.disconnect = function () {\n    if (bridgeInstance) {\n        bridgeInstance.disConnect()\n    }\n};\n//重连操作\nRongIMClient.prototype.reconnect = function (callback) {\n    if (bridgeInstance) {\n        bridgeInstance.reConnect(callback);\n    }\n};\n//同步会话列表\nRongIMClient.prototype.syncConversationList = function (callback) {\n    var modules = new Modules.RelationsInput();\n    modules.setType(1);\n    bridgeInstance.queryMsg(26, tool.arrayFrom(modules.toArrayBuffer()), mapping.userId, {\n        onSuccess: function (list) {\n            tool.forEach(list.info, function (x) {\n                var val = self.createConversation(RongIMClient.ConversationType.setValue(mapping.mapping[x.type]), x.userId, '', true);\n                if (x.type == 1) {\n                    self.getUserInfo(x.userId, {\n                        onSuccess: function (info) {\n                            if (info.getUserName) {\n                                val.setConversationTitle(info.getUserName());\n                                val.setConversationPortrait(info.getPortraitUri());\n                            }\n                        },\n                        onError: function () {\n                        }\n                    })\n                }\n            });\n            callback.onSuccess();\n        },\n        onError: function () {\n            callback.onError(RongIMClient.callback.ErrorCode.UNKNOWN_ERROR);\n        }\n    }, \"RelationsOutput\");\n};\n//得到具体会话\nRongIMClient.prototype.getConversation = function (c, e) {\n    return this.getConversationList().get(c, e);\n};\n//得到会话列表\nRongIMClient.prototype.getConversationList = function () {\n    return conversationList;\n};\n//得到会话通知状态\nRongIMClient.prototype.getConversationNotificationStatus = function (f, d, e) {\n    var c = this.getConversation(f, d);\n    if (c) {\n        e.onSuccess(c.getNotificationStatus())\n    } else {\n        e.onError(RongIMClient.callback.ErrorCode.UNKNOWN_ERROR)\n    }\n};\n//清空指定会话类型的会话\nRongIMClient.prototype.clearConversations = function (list) {\n    var arr = [];\n    for (var i = 0; i < list.length; i++) {\n        for (var j = 0; j < conversationList.length; j++) {\n            conversationList[j].getConversationType() == list[i] && arr.push(j);\n        }\n    }\n    for (i = 0; i < arr.length; i++) {\n        var val = conversationList[arr[i] - i];\n        this.removeConversation(val.getConversationType(), val.getTargetId());\n    }\n};\n//得到会话类型为group的会话\nRongIMClient.prototype.getGroupConversationList = function () {\n    var arr = [];\n    for (var i = 0, item; item = this.getConversationList()[i++];) {\n        if (item.getConversationType() == 3) {\n            arr.push(item);\n        }\n    }\n    return arr;\n};\n//移除指定会话\nRongIMClient.prototype.removeConversation = function (c, e) {\n    var d = tool.remove(this.getConversationList(), function (f) {\n        return f.getTargetId() == e && f.getConversationType() == c\n    });\n    if (!d)\n        return;\n    //删除服务器上存储的会话\n    var mod = new Modules.RelationInfo();\n    mod.setType(C2S[c.valueOf()]);\n    mod.setUserId(e);\n    bridgeInstance.queryMsg(27, tool.arrayFrom(mod.toArrayBuffer()), e, {\n        onSuccess: function () {\n        }, onError: function () {\n        }\n    });\n};\n//设置指定会话通知状态\nRongIMClient.prototype.setConversationNotificationStatus = function (f, d, g, e) {\n    var c = this.getConversation(f, d);\n    if (c) {\n        c.setNotificationStatus(g);\n        e.onSuccess(g)\n    } else {\n        e.onError(RongIMClient.callback.ErrorCode.UNKNOWN_ERROR)\n    }\n};\n//将指定会话设置为列表第一个\nRongIMClient.prototype.setConversationToTop = function (c, e) {\n    this.getConversation(c, e).setTop()\n};\n//设置会话名称\nRongIMClient.prototype.setConversationName = function (f, e, d) {\n    this.getConversation(f, e).setConversationTitle(d)\n};\n//创建一个会话\nRongIMClient.prototype.createConversation = function (f, d, e, islocal) {\n    var g = this.getConversationList().get(f, d);\n    if (g) {\n        return g\n    }\n    var c = new RongIMClient.Conversation();\n    c.setTargetId(d);\n    c.setConversationType(f);\n    c.setConversationTitle(e);\n    c.setTop();\n    if (/^[1234]$/.test(f.valueOf()) && !islocal) {\n        //如果会话类型为1、2、3、4并且不仅是操作本地的会话列表，就把该会话同步到服务器\n        var mod = new Modules.RelationsInput();\n        mod.setType(C2S[f.valueOf()]);\n        bridgeInstance.queryMsg(25, tool.arrayFrom(mod.toArrayBuffer()), d, {\n            onSuccess: function () {\n            }, onError: function () {\n            }\n        });\n    }\n    return c\n};\n//得到当前登陆人员信息\nRongIMClient.prototype.getCurrentUserInfo = function (callback) {\n    this.getUserInfo(mapping.userId, callback);\n};\n//得到执行人员信息\nRongIMClient.prototype.getUserInfo = function (c, e) {\n    var d = new Modules.GetUserInfoInput();\n    d.setNothing(1);\n    bridgeInstance.queryMsg(5, tool.arrayFrom(d.toArrayBuffer()), c, e, \"GetUserInfoOutput\")\n};\n//发送消息\nRongIMClient.prototype.sendMessage = function (h, v, e, c, u) {\n    if (!bridgeInstance.context.channel.isWritable() || h == 5) {\n        //如果连接不可用，或者会话类型为5(system)主动抛出错误\n        u.onError(RongIMClient.callback.ErrorCode.UNKNOWN_ERROR);\n        return;\n    }\n    //进行RongIMClient.MessageContent操作\n    if (!(e instanceof RongIMClient.MessageContent)) {\n        e = new RongIMClient.MessageContent(e);\n    }\n    if (c) {\n        c.process(e.getMessage())\n    }\n    //pb处理后的消息对象\n    var g = e.encode(),\n    //发送的消息对象\n        i = e.getMessage(),\n        j;\n    i.setConversationType(h);\n    i.setMessageDirection(RongIMClient.MessageDirection.SEND);\n    if (!i.getMessageId())\n        i.setMessageId(h + \"_\" + ~~(Math.random() * 0xffffff));\n    i.setSentStatus(RongIMClient.SentStatus.SENDING);\n    i.setSenderUserId(mapping.userId);\n    i.setSentTime((new Date).getTime());\n    i.setTargetId(v);\n    if (/ISCOUNTED/.test(i.getMessageTag())) {\n        j = this.getConversationList().get(h, v);\n        if (!j) {\n            j = this.createConversation(h, v, \"\");\n        }\n        j.setSentTime((new Date).getTime());\n        j.setSentStatus(RongIMClient.SentStatus.SENDING);\n        j.setSenderUserName(\"\");\n        j.setSenderUserId(mapping.userId);\n        j.setObjectName(i.getObjectName());\n        j.setNotificationStatus(RongIMClient.ConversationNotificationStatus.DO_NOT_DISTURB);\n        j.setLatestMessageId(i.getMessageId());\n        j.setLatestMessage(e.getMessage());\n        j.setUnreadMessageCount(0);\n        j.setTop();\n    }\n    bridgeInstance.pubMsg(h.valueOf(), g, v, u, i)\n};\n//上传文件\nRongIMClient.prototype.uploadMedia = function (f, c, d, e) {\n};\n//得到七牛token\nRongIMClient.prototype.getUploadToken = function (c) {\n    var d = new Modules.GetQNupTokenInput();\n    d.setType(1);\n    bridgeInstance.queryMsg(14, tool.arrayFrom(d.toArrayBuffer()), mapping.userId, c, \"GetQNupTokenOutput\")\n};\n//得到下载地址\nRongIMClient.prototype.getDownloadUrl = function (d, c) {\n    var e = new Modules.GetQNdownloadUrlInput();\n    e.setType(1);\n    e.setKey(d);\n    bridgeInstance.queryMsg(14, tool.arrayFrom(e.toArrayBuffer()), mapping.userId, c, \"GetQNdownloadUrlOutput\")\n};\n//设置连接状态监听器\nRongIMClient.prototype.setConnectionStatusListener = function (c) {\n    if (bridgeInstance) {\n        bridgeInstance.setListener(c);\n    } else {\n        listenerList.push(c)\n    }\n};\n//设置消息监听器\nRongIMClient.prototype.setOnReceiveMessageListener = function (c) {\n    if (bridgeInstance) {\n        bridgeInstance.setListener(c)\n    } else {\n        listenerList.push(c)\n    }\n};\n//得到所有未读消息数\nRongIMClient.prototype.getTotalUnreadCount = function () {\n    var count = 0;\n    tool.forEach(this.getConversationList(), function (x) {\n        count += x.getUnreadMessageCount();\n    });\n    return count;\n};\n//得到指定会话未读消息数\nRongIMClient.prototype.getUnreadCount = function (_conversationTypes, targetId) {\n    var count = 0;\n    if (getType(_conversationTypes) == \"array\") {\n        var l = this.getConversationList();\n        for (var i = 0; i < _conversationTypes.length; i++) {\n            tool.forEach(l, function (x) {\n                x.getConversationType() == _conversationTypes[i] && (count += x.getUnreadMessageCount());\n            })\n        }\n    } else {\n        if (_conversationTypes == 0) {\n            return count;\n        }\n        var end = this.getConversationList().get(_conversationTypes, targetId);\n        end && (count = end.getUnreadMessageCount());\n    }\n    return count;\n};\n//清空指定会话未读消息数\nRongIMClient.prototype.clearMessagesUnreadStatus = function (conversationType, targetId) {\n    if (conversationType == 0) {\n        return false;\n    }\n    var end = this.getConversationList().get(conversationType, targetId);\n    return !!(end ? end.setUnreadMessageCount(0) || 1 : 0);\n};\n//初始化聊天室\nRongIMClient.prototype.initChatRoom = function (Id) {\n    mapping.chatroomId = Id;\n};\n//加入聊天室\nRongIMClient.prototype.joinChatRoom = function (Id, defMessageCount, callback) {\n    var e = new Modules.ChrmInput();\n    e.setNothing(1);\n    bridgeInstance.queryMsg(19, tool.arrayFrom(e.toArrayBuffer()), Id, {\n        onSuccess: function () {\n            callback.onSuccess();\n            mapping.chatroomId = Id;\n            var modules = new Modules.ChrmPullMsg();\n            defMessageCount == 0 && (defMessageCount = -1);\n            modules.setCount(defMessageCount);\n            modules.setSyncTime(0);\n            //加入成功进行拉取聊天室消息操作\n            bridgeInstance.context.queryMessage('chrmPull', tool.arrayFrom(modules.toArrayBuffer()), Id, 1, {\n                onSuccess: function (collection) {\n                    var sync = tool.int64ToTimestamp(collection.syncTime);\n                    tool.cookieHelper.setItem(mapping.userId + 'CST', sync);\n                    var list = collection.list;\n                    //把拉取到的消息逐条传给消息监听器\n                    for (var i = 0; i < list.length; i++) {\n                        bridgeInstance.context.handler.onReceived(list[i])\n                    }\n                },\n                onError: function (x) {\n                    callback.onError(x);\n                }\n            }, 'DownStreamMessages')\n        },\n        onError: function () {\n            callback.onError(RongIMClient.callback.ErrorCode.UNKNOWN_ERROR);\n        }\n    }, \"ChrmOutput\");\n};\n//退出聊天室\nRongIMClient.prototype.quitChatRoom = function (Id, callback) {\n    var e = new Modules.ChrmInput();\n    e.setNothing(1);\n    bridgeInstance.queryMsg(17, tool.arrayFrom(e.toArrayBuffer()), Id, callback, \"ChrmOutput\")\n};\n//发送通知消息的类型\nRongIMClient.prototype.sendNotification = function (_conversationType, _targetId, _content, _callback) {\n    if (_content instanceof RongIMClient.NotificationMessage)\n        this.sendMessage(_conversationType, _targetId, new RongIMClient.MessageContent(_content), null, _callback);\n    else\n        throw new Error(\"Wrong Parameters\");\n};\n//发送状态类型的消息\nRongIMClient.prototype.sendStatus = function (_conversationType, _targetId, _content, _callback) {\n    if (_content instanceof RongIMClient.StatusMessage)\n        this.sendMessage(_conversationType, _targetId, new RongIMClient.MessageContent(_content), null, _callback);\n    else\n        throw new Error(\"Wrong Parameters\");\n};\n//设置讨论组邀请状态\nRongIMClient.prototype.setDiscussionInviteStatus = function (_targetId, _status, _callback) {\n    var modules = new Modules.ModifyPermissionInput();\n    modules.setOpenStatus(_status.valueOf());\n    bridgeInstance.queryMsg(11, tool.arrayFrom(modules.toArrayBuffer()), _targetId, {\n        onSuccess: function (x) {\n            _callback.onSuccess(RongIMClient.DiscussionInviteStatus.setValue(x));\n        }, onError: _callback.onError\n    })\n};\n//设置讨论组名称\nRongIMClient.prototype.setDiscussionName = function (_discussionId, _name, _callback) {\n    var modules = new Modules.RenameChannelInput();\n    modules.setName(_name);\n    bridgeInstance.queryMsg(12, tool.arrayFrom(modules.toArrayBuffer()), _discussionId, _callback)\n};\n//将指定成员移除讨论组\nRongIMClient.prototype.removeMemberFromDiscussion = function (_disussionId, _userId, _callback) {\n    var modules = new Modules.ChannelEvictionInput();\n    modules.setUser(_userId);\n    bridgeInstance.queryMsg(9, tool.arrayFrom(modules.toArrayBuffer()), _disussionId, _callback);\n};\n//创建讨论组\nRongIMClient.prototype.createDiscussion = function (_name, _userIdList, _callback) {\n    var modules = new Modules.CreateDiscussionInput();\n    modules.setName(_name);\n    bridgeInstance.queryMsg(1, tool.arrayFrom(modules.toArrayBuffer()), mapping.userId, {\n        onSuccess: function (data) {\n            var modules = new Modules.ChannelInvitationInput();\n            modules.setUsers(_userIdList);\n            bridgeInstance.queryMsg(0, tool.arrayFrom(modules.toArrayBuffer()), data, {\n                onSuccess: function () {\n                },\n                onError: function () {\n                    _callback.onError(RongIMClient.callback.ErrorCode.UNKNOWN_ERROR);\n                }\n            });\n            _callback.onSuccess(data);\n        },\n        onError: function () {\n            _callback.onError(RongIMClient.callback.ErrorCode.UNKNOWN_ERROR);\n        }\n    }, \"CreateDiscussionOutput\");\n};\n//添加指定成员到讨论组\nRongIMClient.prototype.addMemberToDiscussion = function (_discussionId, _userIdList, _callback) {\n    var modules = new Modules.ChannelInvitationInput();\n    modules.setUsers(_userIdList);\n    bridgeInstance.queryMsg(0, tool.arrayFrom(modules.toArrayBuffer()), _discussionId, _callback);\n};\n//得到讨论组信息\nRongIMClient.prototype.getDiscussion = function (_discussionId, _callback) {\n    var modules = new Modules.ChannelInfoInput();\n    modules.setNothing(1);\n    bridgeInstance.queryMsg(4, tool.arrayFrom(modules.toArrayBuffer()), _discussionId, _callback, \"ChannelInfoOutput\");\n};\n//退出讨论组\nRongIMClient.prototype.quitDiscussion = function (_discussionId, _callback) {\n    var modules = new Modules.LeaveChannelInput();\n    modules.setNothing(1);\n    bridgeInstance.queryMsg(7, tool.arrayFrom(modules.toArrayBuffer()), _discussionId, _callback);\n};\n//退出群\nRongIMClient.prototype.quitGroup = function (_groupId, _callback) {\n    var modules = new Modules.LeaveChannelInput();\n    modules.setNothing(1);\n    bridgeInstance.queryMsg(8, tool.arrayFrom(modules.toArrayBuffer()), _groupId, _callback);\n};\n//加入群\nRongIMClient.prototype.joinGroup = function (_groupId, _groupName, _callback) {\n    var modules = new Modules.GroupInfo();\n    modules.setId(_groupId);\n    modules.setName(_groupName);\n    var _mod = new Modules.GroupInput();\n    _mod.setGroupInfo([modules]);\n    bridgeInstance.queryMsg(6, tool.arrayFrom(_mod.toArrayBuffer()), _groupId, _callback, \"GroupOutput\");\n};\n//同步群\nRongIMClient.prototype.syncGroup = function (_groups, _callback) {\n    //去重操作\n    for (var i = 0, part = [], info = []; i < _groups.length; i++) {\n        if (part.length === 0 || !new RegExp(_groups[i].getId()).test(part)) {\n            part.push(_groups[i].getId());\n            var groupinfo = new Modules.GroupInfo();\n            groupinfo.setId(_groups[i].getId());\n            groupinfo.setName(_groups[i].getName());\n            info.push(groupinfo);\n        }\n    }\n    var modules = new Modules.GroupHashInput();\n    modules.setUserId(mapping.userId);\n    modules.setGroupHashCode(MD5(part.sort().join(\"\")));\n    //发给服务器进行md5比对\n    bridgeInstance.queryMsg(13, tool.arrayFrom(modules.toArrayBuffer()), mapping.userId, {\n        onSuccess: function (result) {\n            //1为群信息不匹配需要发送给服务器进行同步，0不需要同步\n            if (result === 1) {\n                var val = new Modules.GroupInput();\n                val.setGroupInfo(info);\n                //比对成功，把群信息发送给服务器\n                bridgeInstance.queryMsg(20, tool.arrayFrom(val.toArrayBuffer()), mapping.userId, {\n                    onSuccess: function () {\n                        _callback.onSuccess();\n                    },\n                    onError: function () {\n                        _callback.onError(RongIMClient.callback.ErrorCode.UNKNOWN_ERROR);\n                    }\n                }, \"GroupOutput\");\n            } else {\n                _callback.onSuccess();\n            }\n        },\n        onError: function () {\n            _callback.onError(RongIMClient.callback.ErrorCode.UNKNOWN_ERROR);\n        }\n    }, \"GroupHashOutput\");\n};\n//添加黑名单\nRongIMClient.prototype.addToBlacklist = function (userId, callback) {\n    var modules = new Modules.Add2BlackListInput();\n    modules.setUserId(userId);\n    bridgeInstance.queryMsg(21, tool.arrayFrom(modules.toArrayBuffer()), userId, callback);\n};\n//得到黑名单\nRongIMClient.prototype.getBlacklist = function (callback) {\n    var modules = new Modules.QueryBlackListInput();\n    modules.setNothing(1);\n    bridgeInstance.queryMsg(23, tool.arrayFrom(modules.toArrayBuffer()), mapping.userId, callback, \"QueryBlackListOutput\");\n};\n//得到指定人员再黑名单中的状态\nRongIMClient.prototype.getBlacklistStatus = function (userId, callback) {\n    var modules = new Modules.BlackListStatusInput();\n    modules.setUserId(userId);\n    bridgeInstance.queryMsg(24, tool.arrayFrom(modules.toArrayBuffer()), userId, {\n        onSuccess: function (x) {\n            callback.onSuccess(RongIMClient.BlacklistStatus.setValue(x));\n        }, onError: function () {\n            callback.onError(RongIMClient.callback.ErrorCode.UNKNOWN_ERROR);\n        }\n    })\n};\n//移除黑名单\nRongIMClient.prototype.removeFromBlacklist = function (userId, callback) {\n    var modules = new Modules.RemoveFromBlackListInput();\n    modules.setUserId(userId);\n    bridgeInstance.queryMsg(22, tool.arrayFrom(modules.toArrayBuffer()), userId, callback);\n};\n//拉取历史消息，单次最多20条\nRongIMClient.prototype.getHistoryMessages = function (_conversationtype, targetid, size, callback) {\n    if (_conversationtype.valueOf() == 0) {\n        callback.onError(RongIMClient.callback.ErrorCode.UNKNOWN_ERROR);\n        return;\n    }\n    var modules = new Modules.HistoryMessageInput();\n    modules.setTargetId(targetid);\n    modules.setDataTime(lastReadTime.get(_conversationtype + targetid));\n    modules.setSize(size);\n    bridgeInstance.queryMsg(HistoryMsgType[_conversationtype.valueOf()], tool.arrayFrom(modules.toArrayBuffer()), targetid, {\n        onSuccess: function (data) {\n            var list = data.list.reverse();\n            lastReadTime.set(_conversationtype + targetid, tool.int64ToTimestamp(data.syncTime));\n            for (var i = 0; i < list.length; i++) {\n                list[i] = messageParser(list[i]);\n            }\n            //hasMsg表示是否还有未拉取到的消息，list为拉取到的消息队列\n            callback.onSuccess(!!data.hasMsg, list);\n        }, onError: function () {\n            callback.onError(RongIMClient.callback.ErrorCode.UNKNOWN_ERROR);\n        }\n    }, \"HistoryMessagesOuput\");\n};\nmodule.exports = RongIMClient;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/IMClient/RongIMClient.js\n ** module id = 1\n ** module chunks = 0\n **/","var mapping = require('./mapping');\nvar doc = document;\nvar global = window;\nvar transportType = '';\nvar tool = {\n    //注册页面加载事件\n    load: function (fn) {\n        if (doc.readyState == \"complete\" || this._pageLoaded) {\n            return fn()\n        }\n        if (global.attachEvent) {\n            global.attachEvent(\"onload\", fn)\n        } else {\n            global.addEventListener(\"load\", fn, false)\n        }\n    },\n    //继承\n    inherit: function (ctor, superCtor,isClassExt) {\n        var f = function () {\n        };\n        if(isClassExt){\n            f.prototype = new superCtor;\n        }else{\n            f.prototype = superCtor.prototype;\n        }\n        ctor.super_ = superCtor;\n        ctor.prototype = new f();\n        ctor.prototype.constructor = ctor;\n    },\n    //查找数组中位于指定下标的元素\n    indexOf: function (arr, item, from) {\n        for (var l = arr.length, i = (from < 0) ? Math.max(0, +from) : from || 0; i < l; i++) {\n            if (arr[i] == item) {\n                return i\n            }\n        }\n        return -1\n    },\n    //判断是否为数组\n    isArray: function (obj) {\n        return Object.prototype.toString.call(obj) == \"[object Array]\";\n    },\n    //遍历，只能遍历数组\n    forEach: (function () {\n        if ([].forEach) {\n            return function (arr, func) {\n                [].forEach.call(arr, func)\n            }\n        } else {\n            return function (arr, func) {\n                for (var i = 0; i < arr.length; i++) {\n                    func.call(arr, arr[i], i, arr)\n                }\n            }\n        }\n    })(),\n    //遍历，可遍历对象也可遍历数组\n    each: function (obj, callback) {\n        if (this.isArray(obj)) {\n            this.forEach(x, callback);\n        } else {\n            for (var _name in obj) {\n                if (obj.hasOwnProperty(_name)) {\n                    callback.call(obj, _name, obj[_name]);\n                }\n            }\n        }\n    },\n    //合并\n    merge: function (target, additional) {\n        for (var i in additional) {\n            if (additional.hasOwnProperty(i)) {\n                target[i] = additional[i]\n            }\n        }\n    },\n    //把类数组转换为数组\n    arrayFrom: function (typedarray) {\n        if (Object.prototype.toString.call(typedarray) == \"[object ArrayBuffer]\") {\n            var arr = new Int8Array(typedarray);\n            return [].slice.call(arr)\n        }\n        return typedarray;\n    },\n    //删除数组指定项\n    remove: function (array, func) {\n        for (var i = 0; i < array.length; i++) {\n            if (func(array[i])) {\n                return array.splice(i, 1)[0]\n            }\n        }\n        return null\n    },\n    //把int64的时间对象转为时间戳\n    int64ToTimestamp: function (obj, isDate) {\n        if (obj.low === undefined) {\n            return obj;\n        }\n        var low = obj.low;\n        if (low < 0) {\n            low += 0xffffffff + 1;\n        }\n        low = low.toString(16);\n        var timestamp = parseInt(obj.high.toString(16) + \"00000000\".replace(new RegExp('0{' + low.length + '}$'), low), 16);\n        if (isDate) {\n            return new Date(timestamp)\n        }\n        return timestamp;\n    },\n    getType: function (obj) {\n        return Object.prototype.toString.call(obj).slice(8, -1);\n    },\n    ready: function (callback) {\n        if (doc.readyState == \"interactive\" || doc.readyState == \"complete\") {\n            callback();\n        } else if (doc.addEventListener) {\n            doc.addEventListener(\"DOMContentLoaded\", function () {\n                doc.removeEventListener(\"DOMContentLoaded\", arguments.callee, false);\n                callback();\n            }, false)\n        } else if (doc.attachEvent) {\n            doc.attachEvent(\"onreadystatechange\", function () {\n                if (doc.readyState === \"interactive\" || doc.readyState === \"complete\") {\n                    doc.detachEvent(\"onreadystatechange\", arguments.callee);\n                    callback()\n                }\n            })\n        }\n    },\n    loadScript: function (src, callback) {\n        var script = doc.createElement(\"script\");\n        var body = doc.body || doc.getElementsByTagName(\"body\")[0];\n        script.src = src;\n        body.appendChild(script);\n        if ('onload' in script) {\n            script.onload = function () {\n                callback && callback();\n            }\n        } else {\n            script.onreadystatechange = function () {\n                if (script.readyState === 'complete') {\n                    callback && callback();\n                }\n            }\n        }\n    },\n    jsonp: function (src, jsonpCallback, callback, onFail) {\n        var cbName = 'cb' + jsonpCount++;\n        var cbAck = 'window.RongIMClient.jsonpPool.' + cbName;\n        if (global.RongIMClient.jsonpPool === void 0) {\n            global.RongIMClient.jsonpPool = {};\n        }\n        global.RongIMClient.jsonpPool[cbName] = function (data) {\n            try {\n                callback(data);\n            } finally {\n                delete global.RongIMClient.jsonpPool[cbName];\n                script.parentNode.removeChild(script);\n            }\n        };\n        var script = doc.createElement('script');\n        script.src = src + '&' + jsonpCallback + '=' + cbAck;\n        script.onerror = function () {\n            onFail();\n        };\n        doc.body.appendChild(script);\n    },\n    getTransportType: function () {\n        return transportType;\n    },\n    setTransportType: function (t) {\n        transportType = t;\n    },\n    //是否为ios\n    ios: /iphone|ipad/i.test(navigator.userAgent),\n    //是否为安卓\n    android: /android/i.test(navigator.userAgent),\n    _pageLoaded: false\n};\nvar jsonpCount = 1;\n//此方法判断是否设置FORCE_LOCAL_STORAGE为true，如果是true则在localstorage中存储。否则在cookie中存储。\ntool.cookieHelper = (function () {\n    var obj, old;\n    if (mapping.globalConf.FORCE_LOCAL_STORAGE === true) {\n        old = localStorage.setItem;\n        localStorage.setItem = function (x, value) {\n            if (localStorage.length == 15) {\n                localStorage.removeItem(localStorage.key(0));\n            }\n            old.call(localStorage, x, value);\n        };\n        obj = localStorage;\n    } else {\n        obj = {\n            getItem: function (x) {\n                var arr = doc.cookie.match(new RegExp(\"(^| )\" + x + \"=([^;]*)(;|$)\"));\n                if (arr != null) {\n                    return (arr[2]);\n                }\n                return null;\n            },\n            setItem: function (x, value) {\n                var exp = new Date();\n                exp.setTime(exp.getTime() + 15 * 24 * 3600 * 1000);\n                doc.cookie = x + \"=\" + escape(value) + \";path=/;expires=\" + exp.toGMTString();\n            },\n            removeItem: function (x) {\n                if (this.getItem(x)) {\n                    doc.cookie = x + \"=;path=/;expires=Thu, 01-Jan-1970 00:00:01 GMT\";\n                }\n            },\n            clear: function () {\n                var keys = doc.cookie.match(/[^ =;]+(?=\\=)/g);\n                if (keys) {\n                    for (var i = keys.length; i--;)\n                        doc.cookie = keys[i] + '=0;path=/;expires=' + new Date(0).toUTCString();\n                }\n            }\n        }\n    }\n    return obj;\n})();\ntool.load(function () {\n    tool._pageLoaded = true;\n    if (!global.JSON) {\n        tool.JSON = {\n            parse: function (sJSON) {\n                return eval('(' + sJSON + ')');\n            },\n            stringify: (function () {\n                var toString = Object.prototype.toString;\n                var isArray = Array.isArray || function (a) {\n                        return toString.call(a) === '[object Array]';\n                    };\n                var escMap = {\n                    '\"': '\\\\\"',\n                    '\\\\': '\\\\\\\\',\n                    '\\b': '\\\\b',\n                    '\\f': '\\\\f',\n                    '\\n': '\\\\n',\n                    '\\r': '\\\\r',\n                    '\\t': '\\\\t'\n                };\n                var escFunc = function (m) {\n                    return escMap[m] || '\\\\u' + (m.charCodeAt(0) + 0x10000).toString(16).substr(1);\n                };\n                var escRE = new RegExp('[\\\\\"' + unescape(\"%00-%1F%u2028%u2029\") + ']', 'g');\n                return function stringify(value) {\n                    if (value == null) {\n                        return 'null';\n                    } else if (typeof value === 'number') {\n                        return isFinite(value) ? value.toString() : 'null';\n                    } else if (typeof value === 'boolean') {\n                        return value.toString();\n                    } else if (typeof value === 'object') {\n                        if (typeof value.toJSON === 'function') {\n                            return stringify(value.toJSON());\n                        } else if (isArray(value)) {\n                            var res = '[';\n                            for (var i = 0; i < value.length; i++)\n                                res += (i ? ', ' : '') + stringify(value[i]);\n                            return res + ']';\n                        } else if (toString.call(value) === '[object Object]') {\n                            var tmp = [];\n                            for (var k in value) {\n                                if (value.hasOwnProperty(k))\n                                    tmp.push(stringify(k) + ': ' + stringify(value[k]));\n                            }\n                            return '{' + tmp.join(', ') + '}';\n                        }\n                    }\n                    return '\"' + value.toString().replace(escRE, escFunc) + '\"';\n                };\n            })()\n        };\n    } else {\n        tool.JSON = global.JSON;\n    }\n    tool.messageIdHandler = (function () {\n        var messageId = 0,\n            isXHR = tool.getTransportType() === \"xhr-polling\",\n            init = function () {\n                messageId = +(tool.cookieHelper.getItem(\"msgId\") || tool.cookieHelper.setItem(\"msgId\", 0) || 0);\n            };\n        isXHR && init();\n        return {\n            //messageid 加一并返回\n            messageIdPlus: function (method) {\n                isXHR && init();\n                if (messageId >= 0xffff) {\n                    method();\n                    return false;\n                }\n                messageId++;\n                isXHR && tool.cookieHelper.setItem(\"msgId\", messageId);\n                return messageId;\n            },\n            //清空messageid\n            clearMessageId: function () {\n                messageId = 0;\n                isXHR && tool.cookieHelper.setItem(\"msgId\", messageId);\n            },\n            //返回当前messageid\n            getMessageId: function () {\n                isXHR && init();\n                return messageId;\n            }\n        }\n    })()\n});\nmodule.exports = tool;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/tool.js\n ** module id = 2\n ** module chunks = 0\n **/","/**\n * Created by zhangyatao on 16/1/7.\n */\nmodule.exports = {\n    mapping: {\n        \"1\": 4,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 0,\n        \"5\": 1,\n        \"6\": 5\n    },\n    //objectname映射\n    typeMapping: {\n        \"RC:TxtMsg\": \"TextMessage\",\n        \"RC:ImgMsg\": \"ImageMessage\",\n        \"RC:VcMsg\": \"VoiceMessage\",\n        \"RC:ImgTextMsg\": \"RichContentMessage\",\n        \"RC:LBSMsg\": \"LocationMessage\"\n    },\n    //通知类型映射\n    sysNtf: {\n        \"RC:InfoNtf\": \"InformationNotificationMessage\",\n        \"RC:ContactNtf\": \"ContactNotificationMessage\",\n        \"RC:ProfileNtf\": \"ProfileNotificationMessage\",\n        \"RC:CmdNtf\": \"CommandNotificationMessage\",\n        \"RC:DizNtf\": \"DiscussionNotificationMessage\"\n    },\n    //消息监听器\n    _ReceiveMessageListener: null,\n    //连接状态监听器\n    _ConnectionStatusListener: null,\n    registerMessageTypeMapping: {},\n    userInfoMapping: {},\n    topic: [\"invtDiz\", \"crDiz\", \"qnUrl\", \"userInf\", \"dizInf\", \"userInf\", \"joinGrp\", \"quitDiz\", \"exitGrp\", \"evctDiz\", [\"chatMsg\", \"pcMsgP\", \"pdMsgP\", \"pgMsgP\", \"ppMsgP\"], \"pdOpen\", \"rename\", \"uGcmpr\", \"qnTkn\", 'destroyChrm', 'createChrm', 'exitChrm', 'queryChrm', 'joinChrm', \"pGrps\", \"addBlack\", \"rmBlack\", \"getBlack\", \"blackStat\", \"addRelation\", 'qryRelation', 'delRelation'],\n    globalConf: {\n        WEB_SOCKET_FORCE_FLASH: null,\n        WEB_XHR_POLLING: null,\n        FORCE_LOCAL_STORAGE: null\n    },\n    Endpoint:{},\n    userId:'',\n    reconnectSet:{\n\n    },\n    chatroomId:''\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/mapping.js\n ** module id = 3\n ** module chunks = 0\n **/","/**\n * Created by zhangyatao on 16/1/11.\n */\n//存储会话列表的类\nvar _func = function () {\n    //添加会话，当前列表没有该会话则将该会话加到队列最后，有的话将该会话放到队列最开始\n    this.add = function (x) {\n        for (var i = 0; i < this.length; i++) {\n            if (this[i].getTargetId() === x.getTargetId() && i != 0 && this[i].getConversationType() == x.getConversationType()) {\n                this.unshift(this.splice(i, 1)[0]);\n                return;\n            }\n        }\n        this.unshift(x);\n    };\n    //根据会话类型和tagetid从列表中得到会话\n    this.get = function (conver, tarid) {\n        for (var i = 0; i < this.length; i++) {\n            if (this[i].getTargetId() == tarid && this[i].getConversationType() == conver) {\n                return this[i]\n            }\n        }\n        return null;\n    }\n};\n_func.prototype = [];\n//本地会话类型和服务器端会话类型映射关系\nvar C2S = {\n    \"4\": 1,\n    \"2\": 2,\n    \"3\": 3,\n    \"1\": 5\n};\nvar sessionStore = global.sessionStorage || new function () {\n        var c = {};\n        this.length = 0;\n        this.clear = function () {\n            c = {};\n            this.length = 0\n        };\n        this.setItem = function (e, f) {\n            !c[e] && this.length++;\n            c[e] = f;\n            return e in c\n        };\n        this.getItem = function (e) {\n            return c[e]\n        };\n        this.removeItem = function (f) {\n            if (f in c) {\n                delete c[f];\n                this.length--;\n                return true;\n            }\n            return false;\n        }\n    };\nvar LimitableMap = function (limit) {\n    this.limit = limit || 10;\n    this.map = {};\n    this.keys = [];\n};\nLimitableMap.prototype.set = function (key, value) {\n    var map = this.map;\n    var keys = this.keys;\n    if (!map.hasOwnProperty(key)) {\n        if (keys.length === this.limit) {\n            var firstKey = keys.shift();\n            delete map[firstKey];\n        }\n        keys.push(key)\n    }\n    map[key] = value;\n};\nLimitableMap.prototype.get = function (key) {\n    return this.map[key] || 0;\n};\nmodule.exports = {\n    list: _func,\n    C2S: C2S,\n    sessionStore: sessionStore,\n    LimitableMap: LimitableMap\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/IMClient/shim.js\n ** module id = 4\n ** module chunks = 0\n **/","var mapping = require('../mapping');\nvar client = require('./client');\nvar e = require('../message/msgEnum');\nvar Qos = e.Qos;\n\nvar Bridge = function (_appkey, _token, _callback) {\n    this.context = client.connect(_appkey, _token, _callback);\n    Bridge.getInstance = function () {\n        return this;\n    }\n};\nBridge.prototype.setListener = function (_changer) {\n    if (typeof _changer == \"object\") {\n        if (typeof _changer.onChanged == 'function') {\n            mapping._ConnectionStatusListener = _changer;\n        } else if (typeof _changer.onReceived == 'function') {\n            mapping._ReceiveMessageListener = _changer;\n        }\n    }\n};\n//重连\nBridge.prototype.reConnect = function (callback) {\n    this.context.channel.reconnect(callback)\n};\n//断连\nBridge.prototype.disConnect = function () {\n    this.context.clearHeartbeat();\n    this.context.channel.disconnect()\n};\n//执行queryMessage请求\nBridge.prototype.queryMsg = function (topic, content, targetId, callback, pbname) {\n    if (typeof topic != \"string\") {\n        topic = mapping.topic[topic]\n    }\n    this.context.queryMessage(topic, content, targetId, Qos.AT_MOST_ONCE, callback, pbname)\n};\n//执行publishMessage请求\nBridge.prototype.pubMsg = function (topic, content, targetId, callback, msg) {\n    this.context.publishMessage(mapping.topic[10][topic], content, targetId, callback, msg)\n};\nmodule.exports = Bridge;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/core/bridge.js\n ** module id = 5\n ** module chunks = 0\n **/","var entity = require('../message/MessageEntity');\nvar handler = require('./messageHandler');\nvar channel = require('./channel');\nvar ack = require('./messageCallback');\nvar mapping = require('../mapping');\nvar md5 = require('../md5');\nvar tool = require('../tool');\nvar en = require('../message/msgEnum');\nvar Qos = en.Qos;\nvar global = window;\n//初始化通道对象\nack.ConnectAck.redirect = function (callback) {\n    Client.getInstance().channel = new channel(Client.Endpoint, callback, Client.getInstance());\n};\n//连接端类，逻辑处理全在此类中\nfunction Client(_to, _ap) {\n    this.timeoutMillis = 100000;\n    this.timeout_ = 0;\n    this.appId = _ap;\n    this.token = _to;\n    this.sdkVer = \"1.0.0\";\n    this.apiVer = \"1.0.0\";\n    this.channel = null;\n    this.handler = null;\n    this.userId = \"\";\n    this.heartbeat = 0;\n    this.chatroomId = '';\n    //用于心跳启动定时器\n}\nClient.prototype.resumeTimer = function () {\n    var self = this;\n    if (!this.timeout_) {\n        this.timeout_ = setTimeout(function () {\n            if (!self.timeout_) {\n                return;\n            }\n            try {\n                self.channel.disconnect()\n            } catch (e) {\n            }\n            clearTimeout(self.timeout_);\n            self.timeout_ = 0;\n            self.channel.reconnect();\n            self.channel.socket.fire(\"StatusChanged\", 5);\n        }, self.timeoutMillis)\n    }\n};\n//销毁心跳定时器\nClient.prototype.pauseTimer = function () {\n    if (this.timeout_) {\n        clearTimeout(this.timeout_);\n        this.timeout_ = 0;\n    }\n};\n//连接服务器\nClient.prototype.connect = function (_callback) {\n    var self = this;\n    //判断navi是否已经返回地址\n    if (mapping.Endpoint.host) {\n        if (tool.getTransportType() == \"websocket\") {\n            if (!global.WebSocket) {\n                _callback.onError(RongIMClient.ConnectErrorStatus.setValue(1));\n                return;\n            }\n            //判断是否是flashsocket  是的话就加载代理文件\n            'loadFlashPolicyFile' in WebSocket && WebSocket.loadFlashPolicyFile();\n        }\n        //实例消息处理类\n        this.handler = new handler(this);\n        //设置连接回调\n        this.handler.setConnectCallback(_callback);\n        //实例通道类型\n        this.channel = new channel(mapping.Endpoint, function () {\n            tool.getTransportType() == \"websocket\" && self.keepLive()\n        }, this);\n        //触发状态改变观察者\n        this.channel.socket.fire(\"StatusChanged\", 1)\n    } else {\n        //没有返回地址就手动抛出错误\n        _callback.onError(RongIMClient.ConnectErrorStatus.setValue(5));\n    }\n};\n//心跳启动方法\nClient.prototype.keepLive = function () {\n    var self = this;\n    if (this.heartbeat > 0) {\n        clearInterval(this.heartbeat);\n    }\n    this.heartbeat = setInterval(function () {\n        self.resumeTimer();\n        self.channel.writeAndFlush(new entity.PingReqMessage());\n        console.log(\"keep live pingReqMessage sending appId \" + self.appId);\n    }, 180000);\n};\n//心跳停止方法\nClient.prototype.clearHeartbeat = function () {\n    clearInterval(this.heartbeat);\n    this.heartbeat = 0;\n    this.pauseTimer();\n};\n//发送publishMessage消息\nClient.prototype.publishMessage = function (_topic, _data, _targetId, _callback, _msg) {\n    var msgId = tool.messageIdHandler.messageIdPlus(this.channel.reconnect);\n    if (!msgId) {\n        return;\n    }\n    var msg = new entity.PublishMessage(_topic, _data, _targetId);\n    msg.setMessageId(msgId);\n    if (_callback) {\n        msg.setQos(Qos.AT_LEAST_ONCE);\n        this.handler.putCallback(new ack.PublishCallback(_callback.onSuccess, _callback.onError), msg.getMessageId(), _msg)\n    } else {\n        msg.setQos(Qos.AT_MOST_ONCE);\n    }\n    this.channel.writeAndFlush(msg);\n};\n//发送queryMessage消息\nClient.prototype.queryMessage = function (_topic, _data, _targetId, _qos, _callback, pbtype) {\n    //如果topic是userinfo，就去userinfo缓存对象里拿，没有的话再去请求服务器拉取userinfo\n    if (_topic == \"userInf\") {\n        if (mapping.userInfoMapping[_targetId]) {\n            _callback.onSuccess(mapping.userInfoMapping[_targetId]);\n            return;\n        }\n    }\n    var msgId = tool.messageIdHandler.messageIdPlus(this.channel.reconnect);\n    if (!msgId) {\n        return;\n    }\n    var msg = new entity.QueryMessage(_topic, _data, _targetId);\n    msg.setMessageId(msgId);\n    msg.setQos(_qos);\n    this.handler.putCallback(new ack.QueryCallback(_callback.onSuccess, _callback.onError), msg.getMessageId(), pbtype);\n    this.channel.writeAndFlush(msg)\n};\n//同步消息\nClient.prototype.syncTime = function (_type, pullTime) {\n    SyncTimeQueue.push({type: _type, pulltime: pullTime});\n    //如果队列中只有一个成员并且状态已经完成就执行invoke方法\n    if (SyncTimeQueue.length == 1 && SyncTimeQueue.state == \"complete\") {\n        invoke()\n    }\n};\n//声明Client.connect静态方法，返回Client实例\nClient.connect = function (appId, token, callback) {\n    //如果appid和本地存储的不一样，清空所有本地存储数据\n    var oldAppId = tool.cookieHelper.getItem(\"appId\");\n    if (oldAppId && oldAppId != appId) {\n        tool.cookieHelper.clear();\n        tool.cookieHelper.setItem(\"appId\", appId);\n    }\n    var client = new Client(token, appId);\n    Client.getInstance = function () {\n        return client;\n    };\n    //请求navi导航\n    Client.getServerEndpoint(token, appId, callback, true);\n    return client;\n};\nClient.getServerEndpoint = function (_token, _appId, callback, unignore) {\n    if (unignore) {\n        //根据token生成MD5截取8-16下标的数据与本地存储的导航信息进行比对\n        //如果信息和上次的通道类型都一样，不执行navi请求，用本地存储的导航信息连接服务器\n        var naviStr = md5(_token).slice(8, 16),\n            _old = tool.cookieHelper.getItem(\"navi\\\\w+?\"),\n            _new = tool.cookieHelper.getItem(\"navi\" + naviStr);\n        if (_old == _new && _new !== null && tool.cookieHelper.getItem(\"rongSDK\") == tool.getTransportType()) {\n            var obj = unescape(_old).split(\",\");\n            setTimeout(function () {\n                RongBinaryHelper.__host = mapping.Endpoint.host = obj[0];\n                mapping.Endpoint.userId = obj[1];\n                Client.getInstance().connect(callback);\n            }, 500);\n            return;\n        }\n    }\n    //导航信息，切换Url对象的key进行线上线下测试操作\n    var Url = {\n        //测试环境\n        \"navUrl-Debug\": \"http://nav.sunquan.rongcloud.net:9001/\",\n        //线上环境\n        \"navUrl-Release\": \"http://nav.cn.rong.io/\"\n    };\n    tool.jsonp(Url[\"navUrl-Release\"] +\n        (tool.getTransportType() == \"xhr-polling\" ? \"cometnavi.js\" : \"navi.js\") +\n        \"?appId=\" + _appId + \"&token=\" + encodeURIComponent(_token),\n        \"callBack\",\n        function (data) {\n            Client.getInstance().connect(callback);\n            //把导航返回的server字段赋值给RongBinaryHelper.__host，因为flash widget需要使用\n            RongBinaryHelper.__host = mapping.Endpoint.host = data[\"server\"];\n            mapping.Endpoint.userId = data.userId;\n            //替换本地存储的导航信息\n            var temp = document.cookie.match(new RegExp(\"(^| )navi\\\\w+?=([^;]*)(;|$)\"));\n            temp !== null && tool.cookieHelper.removeItem(temp[0].split(\"=\")[0].replace(/^\\s/, \"\"));\n            tool.cookieHelper.setItem(\"navi\" + md5(Client.getInstance().token).slice(8, 16), data[\"server\"] + \",\" + (data.userId || \"\"));\n        }, function () {\n            callback.onError(RongIMClient.ConnectErrorStatus.setValue(4));\n        });\n};\n//同步消息队列\nvar SyncTimeQueue = [];\n//队列的执行状态\nSyncTimeQueue.state = \"complete\";\nfunction invoke() {\n    var time, modules, str, target;\n    //从队列开头取出一个赋值给temp变量\n    var temp = SyncTimeQueue.shift();\n    var self = Client.getInstance();\n    if (!temp) {\n        return;\n    }\n    //改变状态为pending\n    SyncTimeQueue.state = \"pending\";\n    if (temp.type != 2) {\n        //普通消息\n        time = tool.cookieHelper.getItem(self.userId) || 0;\n        modules = new Modules.SyncRequestMsg();\n        modules.setIspolling(false);\n        str = 'pullMsg';\n        target = self.userId;\n    } else {\n        //聊天室消息\n        time = tool.cookieHelper.getItem(self.userId + \"CST\") || 0;\n        modules = new Modules.ChrmPullMsg();\n        modules.setCount(0);\n        str = 'chrmPull';\n        if (self.chatroomId === '') {\n            //受到聊天室消息，但是本地没有加入聊天室就手动抛出一个错误\n            throw new Error(\"syncTime:Received messages of chatroom but was not init\");\n        }\n        target = self.chatroomId;\n    }\n    //判断服务器给的时间是否消息本地存储的时间，小于的话不执行拉取操作，进行一下步队列操作\n    if (temp.pulltime <= time) {\n        SyncTimeQueue.state = \"complete\";\n        invoke();\n        return;\n    }\n    modules.setSyncTime(time);\n    //发送queryMessage请求\n    self.queryMessage(str, tool.arrayFrom(modules.toArrayBuffer()), target, Qos.AT_LEAST_ONCE, {\n        onSuccess: function (collection) {\n            var sync = tool.int64ToTimestamp(collection.syncTime),\n                symbol = self.userId;\n            if (str == \"chrmPull\") {\n                symbol += 'CST';\n            }\n            //把返回时间戳存入本地，普通消息key为userid，聊天室消息key为userid＋'CST'；value都为服务器返回的时间戳\n            tool.cookieHelper.setItem(symbol, sync);\n            //把拉取到的消息逐条传给消息监听器\n            var list = collection.list;\n            for (var i = 0; i < list.length; i++) {\n                Client.getInstance().handler.onReceived(list[i])\n            }\n            SyncTimeQueue.state = \"complete\";\n            invoke();\n        },\n        onError: function () {\n            SyncTimeQueue.state = \"complete\";\n            invoke();\n        }\n    }, \"DownStreamMessages\");\n}\nmodule.exports = Client;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/core/client.js\n ** module id = 6\n ** module chunks = 0\n **/","var msg = require('./Message');\nvar TinyStream = require('../binary');\nvar e = require('./msgEnum');\nvar util = require('../tool');\nvar Message = msg.Message;\nvar Header = msg.Header;\nvar Type = e.Type;\nvar ConnectionState = e.ConnectionState;\nvar DisconnectionStatus = e.DisconnectionStatus;\nfunction ConnectMessage() {\n    var CONNECT_HEADER_SIZE = 12,\n        protocolId = \"RCloud\",\n        protocolVersion = 3,\n        clientId, keepAlive, appId, token, cleanSession, willTopic, will, willQos, retainWill, hasAppId, hasToken, hasWill;\n    switch (arguments.length) {\n        case 0:\n            Message.call(this, Type.CONNECT);\n            break;\n        case 1:\n            Message.call(this, arguments[0]);\n            break;\n        case 3:\n            Message.call(this, Type.CONNECT);\n            if (!arguments[0] || arguments[0].length > 64) {\n                throw new Error(\"ConnectMessage:Client Id cannot be null and must be at most 64 characters long: \" + arguments[0])\n            }\n            clientId = arguments[0];\n            cleanSession = arguments[1];\n            keepAlive = arguments[2];\n            break\n    }\n    this.messageLength = function () {\n        var payloadSize = TinyStream.toMQTString(clientId).length;\n        payloadSize += TinyStream.toMQTString(willTopic).length;\n        payloadSize += TinyStream.toMQTString(will).length;\n        payloadSize += TinyStream.toMQTString(appId).length;\n        payloadSize += TinyStream.toMQTString(token).length;\n        return payloadSize + CONNECT_HEADER_SIZE\n    };\n    this.readMessage = function (In) {\n        var stream = TinyStream.parse(In);\n        protocolId = stream.readUTF();\n        protocolVersion = stream.readByte();\n        var cFlags = stream.readByte();\n        hasAppId = (cFlags & 128) > 0;\n        hasToken = (cFlags & 64) > 0;\n        retainWill = (cFlags & 32) > 0;\n        willQos = cFlags >> 3 & 3;\n        hasWill = (cFlags & 4) > 0;\n        cleanSession = (cFlags & 32) > 0;\n        keepAlive = stream.read() * 256 + stream.read();\n        clientId = stream.readUTF();\n        if (hasWill) {\n            willTopic = stream.readUTF();\n            will = stream.readUTF()\n        }\n        if (hasAppId) {\n            try {\n                appId = stream.readUTF()\n            } catch (ex) {\n            }\n        }\n        if (hasToken) {\n            try {\n                token = stream.readUTF()\n            } catch (ex) {\n            }\n        }\n        return stream\n    };\n    this.writeMessage = function (out) {\n        var stream = TinyStream.parse(out);\n        stream.writeUTF(protocolId);\n        stream.write(protocolVersion);\n        var flags = cleanSession ? 2 : 0;\n        flags |= hasWill ? 4 : 0;\n        flags |= willQos ? willQos >> 3 : 0;\n        flags |= retainWill ? 32 : 0;\n        flags |= hasToken ? 64 : 0;\n        flags |= hasAppId ? 128 : 0;\n        stream.write(flags);\n        stream.writeChar(keepAlive);\n        stream.writeUTF(clientId);\n        if (hasWill) {\n            stream.writeUTF(willTopic);\n            stream.writeUTF(will)\n        }\n        if (hasAppId) {\n            stream.writeUTF(appId)\n        }\n        if (hasToken) {\n            stream.writeUTF(token)\n        }\n        return stream\n    };\n}\nConnectMessage._name = \"ConnectMessage\";\nutil.inherit(ConnectMessage, Message, true);\nfunction ConnAckMessage() {\n    var status, userId, MESSAGE_LENGTH = 2;\n    switch (arguments.length) {\n        case 0:\n            Message.call(this, Type.CONNACK);\n            break;\n        case 1:\n            if (arguments[0] instanceof Header) {\n                Message.call(this, arguments[0])\n            } else {\n                if (arguments[0] instanceof ConnectionState) {\n                    Message.call(this, Type.CONNACK);\n                    if (arguments[0] == null) {\n                        throw new Error(\"ConnAckMessage:The status of ConnAskMessage can't be null\")\n                    }\n                    status = arguments[0]\n                }\n            }\n    }\n    this.messageLength = function () {\n        var length = MESSAGE_LENGTH;\n        if (userId) {\n            length += TinyStream.toMQTString(userId).length\n        }\n        return length\n    };\n    this.readMessage = function (In, msglength) {\n        var stream = TinyStream.parse(In);\n        stream.read();\n        var result = +stream.read();\n        if (result >= 0 && result <= 9) {\n            this.setStatus(result);\n        } else {\n            throw new Error(\"Unsupported CONNACK code:\" + result)\n        }\n        if (msglength > MESSAGE_LENGTH) {\n            this.setUserId(stream.readUTF())\n        }\n    };\n    this.writeMessage = function (out) {\n        var stream = TinyStream.parse(out);\n        stream.write(128);\n        switch (+status) {\n            case 0:\n            case 1:\n            case 2:\n            case 5:\n            case 6:\n                stream.write(+status);\n                break;\n            case 3:\n            case 4:\n                stream.write(3);\n                break;\n            default:\n                throw new Error(\"Unsupported CONNACK code:\" + status);\n        }\n        if (userId) {\n            stream.writeUTF(userId)\n        }\n        return stream\n    };\n    this.getStatus = function () {\n        return status\n    };\n    this.setStatus = function (x) {\n        status = x instanceof ConnectionState ? x : ConnectionState.setValue(x);\n    };\n    this.setUserId = function (_userId) {\n        userId = _userId\n    };\n    this.getUserId = function () {\n        return userId\n    };\n}\nConnAckMessage._name = \"ConnAckMessage\";\nutil.inherit(ConnAckMessage, Message, true);\nfunction DisconnectMessage(one) {\n    var status;\n    this.MESSAGE_LENGTH = 2;\n    if (one instanceof Header) {\n        Message.call(this, one)\n    } else {\n        Message.call(this, Type.DISCONNECT);\n        if (one instanceof DisconnectionStatus) {\n            status = one\n        }\n    }\n    this.messageLength = function () {\n        return this.MESSAGE_LENGTH\n    };\n    this.readMessage = function (In) {\n        var _in = TinyStream.parse(In);\n        _in.read();\n        var result = +_in.read();\n        if (result >= 0 && result <= 5) {\n            this.setStatus(result);\n        } else {\n            throw new Error(\"Unsupported CONNACK code:\" + result)\n        }\n    };\n    this.writeMessage = function (Out) {\n        var out = TinyStream.parse(Out);\n        out.write(0);\n        if (+status >= 1 && +status <= 3) {\n            out.write((+status) - 1);\n        } else {\n            throw new Error(\"Unsupported CONNACK code:\" + status)\n        }\n    };\n    this.setStatus = function (x) {\n        status = x instanceof DisconnectionStatus ? x : DisconnectionStatus.setValue(x);\n    };\n    this.getStatus = function () {\n        return status\n    };\n}\nDisconnectMessage._name = \"DisconnectMessage\";\nutil.inherit(DisconnectMessage, Message, true);\nfunction PingReqMessage(header) {\n    if (header && header instanceof Header) {\n        Message.call(this, header)\n    } else {\n        Message.call(this, Type.PINGREQ)\n    }\n}\nPingReqMessage._name = \"PingReqMessage\";\nutil.inherit(PingReqMessage, Message, true);\nfunction PingRespMessage(header) {\n    if (header && header instanceof Header) {\n        Message.call(this, header)\n    } else {\n        Message.call(this, Type.PINGRESP)\n    }\n}\nPingRespMessage._name = \"PingRespMessage\";\nutil.inherit(PingRespMessage, Message, true);\nfunction RetryableMessage(argu) {\n    var messageId;\n    Message.call(this, argu);\n    this.messageLength = function () {\n        return 2\n    };\n    this.writeMessage = function (Out) {\n        var out = TinyStream.parse(Out),\n            Id = this.getMessageId(),\n            lsb = Id & 255,\n            msb = (Id & 65280) >> 8;\n        out.write(msb);\n        out.write(lsb);\n        return out\n    };\n    this.readMessage = function (In) {\n        var _in = TinyStream.parse(In),\n            msgId = _in.read() * 256 + _in.read();\n        this.setMessageId(parseInt(msgId, 10));\n    };\n    this.setMessageId = function (_messageId) {\n        messageId = _messageId\n    };\n    this.getMessageId = function () {\n        return messageId\n    }\n}\nRetryableMessage._name = \"RetryableMessage\";\nutil.inherit(RetryableMessage, Message, true);\nfunction PubAckMessage(args) {\n    var status, msgLen = 2,\n        date = 0;\n    if (args instanceof Header) {\n        RetryableMessage.call(this, args)\n    } else {\n        RetryableMessage.call(this, Type.PUBACK);\n        this.setMessageId(args)\n    }\n    this.messageLength = function () {\n        return msgLen\n    };\n    this.writeMessage = function (Out) {\n        var out = TinyStream.parse(Out);\n        PubAckMessage.prototype.writeMessage.call(this, out)\n    };\n    this.readMessage = function (In) {\n        var _in = TinyStream.parse(In);\n        PubAckMessage.prototype.readMessage.call(this, _in);\n        date = _in.readInt();\n        status = _in.read() * 256 + _in.read()\n    };\n    this.setStatus = function (x) {\n        status = x;\n    };\n    this.getStatus = function () {\n        return status\n    };\n    this.getDate = function () {\n        return date\n    };\n}\nPubAckMessage._name = \"PubAckMessage\";\nutil.inherit(PubAckMessage, RetryableMessage, true);\nfunction PublishMessage(one, two, three) {\n    var topic, data, targetId, date;\n    if (arguments.length == 1 && one instanceof Header) {\n        RetryableMessage.call(this, one)\n    } else {\n        if (arguments.length == 3) {\n            RetryableMessage.call(this, Type.PUBLISH);\n            topic = one;\n            targetId = three;\n            data = typeof two == \"string\" ? TinyStream.toMQTString(two) : two;\n        }\n    }\n    this.messageLength = function () {\n        var length = 10;\n        length += TinyStream.toMQTString(topic).length;\n        length += TinyStream.toMQTString(targetId).length;\n        length += data.length;\n        return length\n    };\n    this.writeMessage = function (Out) {\n        var out = TinyStream.parse(Out);\n        out.writeUTF(topic);\n        out.writeUTF(targetId);\n        PublishMessage.prototype.writeMessage.apply(this, arguments);\n        out.write(data)\n    };\n    this.readMessage = function (In, msgLength) {\n        var pos = 6,\n            _in = TinyStream.parse(In);\n        date = _in.readInt();\n        topic = _in.readUTF();\n        pos += TinyStream.toMQTString(topic).length;\n        PublishMessage.prototype.readMessage.apply(this, arguments);\n        data = new Array(msgLength - pos);\n        _in.read(data)\n    };\n    this.setTopic = function (x) {\n        topic = x;\n    };\n    this.setData = function (x) {\n        data = x;\n    };\n    this.setTargetId = function (x) {\n        targetId = x;\n    };\n    this.setDate = function (x) {\n        date = x;\n    };\n    this.setData = function (x) {\n        data = x;\n    };\n    this.getTopic = function () {\n        return topic\n    };\n    this.getData = function () {\n        return data\n    };\n    this.getTargetId = function () {\n        return targetId\n    };\n    this.getDate = function () {\n        return date\n    }\n}\nPublishMessage._name = \"PublishMessage\";\nutil.inherit(PublishMessage, RetryableMessage, true);\nfunction QueryMessage(one, two, three) {\n    var topic, data, targetId;\n    if (one instanceof Header) {\n        RetryableMessage.call(this, one)\n    } else {\n        if (arguments.length == 3) {\n            RetryableMessage.call(this, Type.QUERY);\n            data = typeof two == \"string\" ? TinyStream.toMQTString(two) : two;\n            topic = one;\n            targetId = three;\n        }\n    }\n    this.messageLength = function () {\n        var length = 0;\n        length += TinyStream.toMQTString(topic).length;\n        length += TinyStream.toMQTString(targetId).length;\n        length += 2;\n        length += data.length;\n        return length\n    };\n    this.writeMessage = function (Out) {\n        var out = TinyStream.parse(Out);\n        out.writeUTF(topic);\n        out.writeUTF(targetId);\n        this.constructor.prototype.writeMessage.call(this, out);\n        out.write(data)\n    };\n    this.readMessage = function (In, msgLength) {\n        var pos = 0,\n            _in = TinyStream.parse(In);\n        topic = _in.readUTF();\n        targetId = _in.readUTF();\n        pos += TinyStream.toMQTString(topic).length;\n        pos += TinyStream.toMQTString(targetId).length;\n        this.constructor.prototype.readMessage.apply(this, arguments);\n        pos += 2;\n        data = new Array(msgLength - pos);\n        _in.read(data)\n    };\n    this.setTopic = function (x) {\n        topic = x;\n    };\n    this.setData = function (x) {\n        data = x;\n    };\n    this.setTargetId = function (x) {\n        targetId = x;\n    };\n    this.getTopic = function () {\n        return topic\n    };\n    this.getData = function () {\n        return data\n    };\n    this.getTargetId = function () {\n        return targetId\n    };\n}\nQueryMessage._name = \"QueryMessage\";\nutil.inherit(QueryMessage, RetryableMessage, true);\nfunction QueryConMessage(messageId) {\n    if (messageId instanceof Header) {\n        RetryableMessage.call(this, messageId)\n    } else {\n        RetryableMessage.call(this, Type.QUERYCON);\n        this.setMessageId(messageId)\n    }\n}\nQueryConMessage._name = \"QueryConMessage\";\nutil.inherit(QueryConMessage, RetryableMessage, true);\nfunction QueryAckMessage(header) {\n    var data, status, date;\n    RetryableMessage.call(this, header);\n    this.readMessage = function (In, msgLength) {\n        var _in = TinyStream.parse(In);\n        QueryAckMessage.prototype.readMessage.call(this, _in);\n        date = _in.readInt();\n        status = _in.read() * 256 + _in.read();\n        if (msgLength > 0) {\n            data = new Array(msgLength - 8);\n            _in.read(data)\n        }\n    };\n    this.getStatus = function () {\n        return status\n    };\n    this.getDate = function () {\n        return date\n    };\n    this.setDate = function (x) {\n        date = x;\n    };\n    this.setStatus = function (x) {\n        status = x;\n    };\n    this.setData = function (x) {\n        data = x;\n    };\n    this.getData = function () {\n        return data\n    };\n}\nQueryAckMessage._name = \"QueryAckMessage\";\nutil.inherit(QueryAckMessage, RetryableMessage, true);\nmodule.exports = {\n    ConnectMessage: ConnectMessage,\n    ConnAckMessage: ConnAckMessage,\n    DisconnectMessage: DisconnectMessage,\n    PingReqMessage: PingReqMessage,\n    PingRespMessage: PingRespMessage,\n    RetryableMessage: RetryableMessage,\n    PubAckMessage: PubAckMessage,\n    PublishMessage: PublishMessage,\n    QueryMessage: QueryMessage,\n    QueryConMessage: QueryConMessage,\n    QueryAckMessage: QueryAckMessage\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/message/MessageEntity.js\n ** module id = 7\n ** module chunks = 0\n **/","/**\n * 消息类，对java逻辑的重新实现\n * */\nvar e = require('./msgEnum');\nvar TinyStream = require('../binary');\nvar Qos = e.Qos;\nvar Type = e.Type;\nfunction Message(argu) {\n    var _header, _headerCode, lengthSize = 0;\n    if (argu instanceof Header) {\n        _header = argu\n    } else {\n        _header = new Header(argu, false, Qos.AT_MOST_ONCE, false)\n    }\n    this.write = function (Out) {\n        var out = TinyStream.parse(Out);\n        _headerCode = this.getHeaderFlag();\n        out.write(_headerCode);\n        this.writeMessage(out);\n        return out\n    };\n    this.getHeaderFlag = function () {\n        return _header.encode();\n    };\n    this.getLengthSize = function () {\n        return lengthSize\n    };\n    this.setRetained = function (retain) {\n        _header.retain = retain\n    };\n    this.isRetained = function () {\n        return _header.retain\n    };\n    this.setQos = function (qos) {\n        _header.qos = qos instanceof Qos ? qos : Qos.setValue(qos);\n    };\n    this.getQos = function () {\n        return _header.qos\n    };\n    this.setDup = function (dup) {\n        _header.dup = dup\n    };\n    this.isDup = function () {\n        return _header.dup\n    };\n    this.getType = function () {\n        return _header.type\n    };\n}\nMessage._name = \"Message\";\nMessage.prototype = {\n    read: function (In, length) {\n        this.readMessage(In, length)\n    },\n    toBytes: function () {\n        return this.write([]).getBytesArray()\n    }, messageLength: function () {\n        return 0\n    }, writeMessage: function (out) {\n    }, readMessage: function (In) {\n    }, init: function (args) {\n        var valName, nana;\n        for (nana in args) {\n            if (!args.hasOwnProperty(nana))\n                continue;\n            valName = nana.replace(/^\\w/, function (x) {\n                var tt = x.charCodeAt(0);\n                return 'set' + (tt >= 0x61 ? String.fromCharCode(tt & ~32) : x)\n            });\n            if (valName in this) {\n                this[valName](args[nana])\n            }\n        }\n    }\n};\nfunction Header(_type, _retain, _qos, _dup) {\n    this.type = null;\n    this.retain = false;\n    this.qos = Qos.AT_LEAST_ONCE;\n    this.dup = false;\n    if (_type && +_type == _type && arguments.length == 1) {\n        this.retain = (_type & 1) > 0;\n        this.qos = Qos.setValue((_type & 6) >> 1);\n        this.dup = (_type & 8) > 0;\n        this.type = Type.setValue((_type >> 4) & 15);\n    } else {\n        this.type = Type.setValue(_type);\n        this.retain = _retain;\n        this.qos = Qos.setValue(_qos);\n        this.dup = _dup;\n    }\n}\nHeader.prototype = {\n    getType: function () {\n        return this.type\n    }, encode: function () {\n        var _byte = (this.type << 4);\n        _byte |= this.retain ? 1 : 0;\n        _byte |= this.qos << 1;\n        _byte |= this.dup ? 8 : 0;\n        return _byte\n    }, toString: function () {\n        return \"Header [type=\" + this.type + \",retain=\" + this.retain + \",qos=\" + this.qos + \",dup=\" + this.dup + \"]\"\n    }\n};\nmodule.exports = {\n    Message: Message,\n    Header: Header\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/message/Message.js\n ** module id = 8\n ** module chunks = 0\n **/","var myEnum = require('../enum');\nvar Qos = myEnum({AT_MOST_ONCE: 0, AT_LEAST_ONCE: 1, EXACTLY_ONCE: 2, DEFAULT: 3}),\n    Type = myEnum({\n        CONNECT: 1,\n        CONNACK: 2,\n        PUBLISH: 3,\n        PUBACK: 4,\n        QUERY: 5,\n        QUERYACK: 6,\n        QUERYCON: 7,\n        SUBSCRIBE: 8,\n        SUBACK: 9,\n        UNSUBSCRIBE: 10,\n        UNSUBACK: 11,\n        PINGREQ: 12,\n        PINGRESP: 13,\n        DISCONNECT: 14\n    }),\n    DisconnectionStatus = myEnum({\n        RECONNECT: 0,\n        OTHER_DEVICE_LOGIN: 1,\n        CLOSURE: 2,\n        UNKNOWN_ERROR: 3,\n        LOGOUT: 4,\n        BLOCK: 5\n    }),\n    ConnectionState = myEnum({\n        ACCEPTED: 0,\n        UNACCEPTABLE_PROTOCOL_VERSION: 1,\n        IDENTIFIER_REJECTED: 2,\n        SERVER_UNAVAILABLE: 3,\n        TOKEN_INCORRECT: 4,\n        NOT_AUTHORIZED: 5,\n        REDIRECT: 6,\n        PACKAGE_ERROR: 7,\n        APP_BLOCK_OR_DELETE: 8,\n        BLOCK: 9,\n        TOKEN_EXPIRE: 10,\n        DEVICE_ERROR: 11\n    });\nmodule.exports = {\n    Qos: Qos,\n    Type: Type,\n    DisconnectionStatus: DisconnectionStatus,\n    ConnectionState: ConnectionState\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/message/msgEnum.js\n ** module id = 9\n ** module chunks = 0\n **/","function inherit(superCtor) {\n    var f = function () {\n    };\n    f.prototype = superCtor;\n    return new f;\n}\nvar Enum = function (namesToValues) {\n    var enumeration = function () {\n        throw \"can't Instantiate Enumerations\";\n    };\n    enumeration.setValue = function (x) {\n        var val = null;\n        enumeration.foreach(function (i) {\n            if (i.value == x || i.name == x) {\n                val = enumeration[i.name];\n            }\n        }, null);\n        return val;\n    };\n\n\n    var proto = enumeration.prototype = {\n        constructor: enumeration,\n        toString: function () {\n            return this.name;\n        },\n        valueOf: function () {\n            return this.value;\n        },\n        toJSON: function () {\n            return this.name;\n        }\n    };\n    enumeration.values = [];\n    for (var _name in namesToValues) {\n        var e = inherit(proto);\n        e.name = _name;\n        e.value = namesToValues[_name];\n        enumeration[_name] = e;\n        enumeration.values.push(e);\n    }\n    enumeration.foreach = function (f, c) {\n        for (var i = 0; i < this.values.length; i++) {\n            f.call(c, this.values[i]);\n        }\n    };\n    return enumeration;\n};\nmodule.exports = Enum;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/enum.js\n ** module id = 10\n ** module chunks = 0\n **/","var global = window;\nvar binaryPot = global.RongBinaryHelper = {\n    /**\n     * 初始化字节流,把-128至128的区间改为0-256的区间.便于计算\n     * @param {Array} array 字节流数组\n     * @return {Array} 转化好的字节流数组\n     */\n    init: function (array) {\n        for (var i = 0; i < array.length; i++) {\n            array[i] *= 1;\n            if (array[i] < 0) {\n                array[i] += 256\n            }\n            if (array[i] > 255) {\n                throw new Error('不合法字节流')\n            }\n        }\n        return array;\n    },\n    /**\n     * 把一段字符串按照utf8编码写到缓冲区中\n     * @param {String} str 将要写入缓冲区的字符串\n     * @param {Boolean} isGetBytes  是否只得到内容字节(不包括最开始的两位占位字节)\n     * @returns {Array} 字节流\n     */\n    writeUTF: function (str, isGetBytes) {\n        var back = [],\n            byteSize = 0;\n        for (var i = 0; i < str.length; i++) {\n            var code = str.charCodeAt(i);\n            if (code >= 0 && code <= 127) {\n                byteSize += 1;\n                back.push(code);\n            } else if (code >= 128 && code <= 2047) {\n                byteSize += 2;\n                back.push((192 | (31 & (code >> 6))));\n                back.push((128 | (63 & code)))\n            } else if (code >= 2048 && code <= 65535) {\n                byteSize += 3;\n                back.push((224 | (15 & (code >> 12))));\n                back.push((128 | (63 & (code >> 6))));\n                back.push((128 | (63 & code)))\n            }\n        }\n        for (i = 0; i < back.length; i++) {\n            if (back[i] > 255) {\n                back[i] &= 255\n            }\n        }\n        if (isGetBytes) {\n            return back\n        }\n        if (byteSize <= 255) {\n            return [0, byteSize].concat(back);\n        } else {\n            return [byteSize >> 8, byteSize & 255].concat(back);\n        }\n    },\n    /**\n     *  把一串字节流按照utf8编码读取出来\n     * @param arr 字节流\n     * @returns {String} 读取出来的字符串\n     */\n    readUTF: function (arr) {\n        if (Object.prototype.toString.call(arr) == \"[object String]\") {\n            return arr;\n        }\n        var UTF = \"\",\n            _arr = this.init(arr);\n        for (var i = 0; i < _arr.length; i++) {\n            var one = _arr[i].toString(2),\n                v = one.match(/^1+?(?=0)/);\n            if (v && one.length == 8) {\n                var bytesLength = v[0].length,\n                    store = _arr[i].toString(2).slice(7 - bytesLength);\n                for (var st = 1; st < bytesLength; st++) {\n                    store += _arr[st + i].toString(2).slice(2)\n                }\n                UTF += String.fromCharCode(parseInt(store, 2));\n                i += bytesLength - 1\n            } else {\n                UTF += String.fromCharCode(_arr[i])\n            }\n        }\n        return UTF\n    },\n    /**\n     * 转换成Stream对象\n     * @param x\n     * @returns {TinyStream}\n     */\n    convertStream: function (x) {\n        if (x instanceof TinyStream) {\n            return x\n        } else {\n            return new TinyStream(x)\n        }\n    },\n    /**\n     * 把一段字符串转为mqtt格式\n     * @param str\n     * @returns {*|Array}\n     */\n    toMQttString: function (str) {\n        return this.writeUTF(str)\n    }\n};\n/**\n * 读取指定长度的字节流到指定数组中\n * @param {TinyStream} m Stream实例\n * @param {number} i 读取的长度\n * @param {Array} a 存入的数组\n * @returns {Array} 存入的数组\n */\nfunction baseRead(m, i, a) {\n    var t = a ? a : [];\n    for (var start = 0; start < i; start++) {\n        t[start] = m.pool[m.position++]\n    }\n    return t\n}\n/**\n * 判断浏览器是否支持ArrayBuffer\n */\nvar supportArrayBuffer = (function () {\n    return !!window.ArrayBuffer;\n})();\n/**\n * 字节流处理实体类\n * @param {String|Array} array 初始化字节流,如果是字符串则按照UTF8的格式写入缓冲区\n * @constructor\n */\nfunction TinyStream(array) {\n    if (!(this instanceof TinyStream)) {\n        return new TinyStream(array);\n    }\n    /**\n     * 字节流缓冲区\n     * @type {Array}\n     */\n    this.pool = [];\n    if (Object.prototype.toString.call(array) === '[object Array]') {\n        this.pool = binaryPot.init(array);\n    } else if (Object.prototype.toString.call(array) == \"[object ArrayBuffer]\") {\n        var arr = new Int8Array(array);\n        this.pool = binaryPot.init([].slice.call(arr));\n    } else if (typeof array === 'string') {\n        this.pool = binaryPot.writeUTF(array);\n    }\n    var self = this;\n    //当前流执行的起始位置\n    this.position = 0;\n    //当前流写入的多少字节\n    this.writen = 0;\n    //返回当前流执行的起始位置是否已经大于整个流的长度\n    this.check = function () {\n        return self.position >= self.pool.length\n    };\n}\n/**\n * 强制转换为Stream对象\n * @param x\n * @returns {*|TinyStream}\n */\nTinyStream.parse = function (x) {\n    return binaryPot.convertStream(x);\n};\nTinyStream.toMQTString = function (x) {\n    return binaryPot.toMQttString(x);\n};\nTinyStream.prototype = {\n    /**\n     * 从缓冲区读取4个字节的长度并转换为int值,position往后移4位\n     * @returns {Number} 读取到的数字\n     * @description 如果position大于等于缓冲区的长度则返回-1\n     */\n    readInt: function () {\n        if (this.check()) {\n            return -1\n        }\n        var end = \"\";\n        for (var i = 0; i < 4; i++) {\n            end += this.pool[this.position++].toString(16)\n        }\n        return parseInt(end, 16);\n    },\n    /**\n     * 从缓冲区读取1个字节,position往后移1位\n     * @returns {Number}\n     * @description 如果position大于等于缓冲区的长度则返回-1\n     */\n    readByte: function () {\n        if (this.check()) {\n            return -1\n        }\n        var val = this.pool[this.position++];\n        if (val > 255) {\n            val &= 255;\n        }\n        return val;\n    },\n    /**\n     * 从缓冲区读取1个字节,或读取指定长度的字节到传入的数组中,position往后移1或bytesArray.length位\n     * @param {Array|undefined} bytesArray\n     * @returns {Array|Number}\n     */\n    read: function (bytesArray) {\n        if (this.check()) {\n            return -1\n        }\n        if (bytesArray) {\n            return baseRead(this, bytesArray.length | 0, bytesArray)\n        } else {\n            return this.readByte();\n        }\n    },\n    /**\n     * 从缓冲区的position位置按UTF8的格式读取字符串,position往后移指定的长度\n     * @returns {String} 读取的字符串\n     */\n    readUTF: function () {\n        var big = (this.readByte() << 8) | this.readByte();\n        return binaryPot.readUTF(this.pool.slice(this.position, this.position += big));\n    },\n    /**\n     * 把字节流写入缓冲区,writen往后移指定的位\n     * @param {Number|Array} _byte 写入缓冲区的字节(流)\n     * @returns {Array} 写入的字节流\n     */\n    write: function (_byte) {\n        var b = _byte;\n        if (Object.prototype.toString.call(b).toLowerCase() == \"[object array]\") {\n            [].push.apply(this.pool, b);\n            this.writen += b.length;\n        } else {\n            if (+b == b) {\n                if (b > 255) {\n                    b &= 255;\n                }\n                this.pool.push(b);\n                this.writen++\n            }\n        }\n        return b\n    },\n    /**\n     * 把参数当成char类型写入缓冲区,writen往后移2位\n     * @param {Number} v 写入缓冲区的字节\n     */\n    writeChar: function (v) {\n        if (+v != v) {\n            throw new Error(\"writeChar:arguments type is error\")\n        }\n        this.write((v >> 8) & 255);\n        this.write(v & 255);\n        this.writen += 2\n    },\n    /**\n     * 把字符串按照UTF8的格式写入缓冲区,writen往后移指定的位\n     * @param {String} str 字符串\n     * @return {Array} 缓冲区\n     */\n    writeUTF: function (str) {\n        var val = binaryPot.writeUTF(str);\n        [].push.apply(this.pool, val);\n        this.writen += val.length;\n    },\n    /**\n     * 把缓冲区字节流的格式从0至256的区间改为-128至128的区间\n     * @returns {Array} 转换后的字节流\n     */\n    toComplements: function () {\n        var _tPool = this.pool;\n        for (var i = 0; i < _tPool.length; i++) {\n            if (_tPool[i] > 128) {\n                _tPool[i] -= 256\n            }\n        }\n        return _tPool\n    },\n    /**\n     * 获取整个缓冲区的字节\n     * @param {Boolean} isCom 是否转换字节流区间\n     * @returns {Array} 转换后的缓冲区\n     */\n    getBytesArray: function (isCom) {\n        if (isCom) {\n            return this.toComplements()\n        }\n        return this.pool\n    },\n    /**\n     * 把缓冲区的字节流转换为ArrayBuffer\n     * @returns {ArrayBuffer}\n     * @throw {Error} 不支持ArrayBuffer\n     */\n    toArrayBuffer: function () {\n        if (supportArrayBuffer) {\n            return new ArrayBuffer(this.getBytesArray());\n        } else {\n            throw new Error('not support arraybuffer');\n        }\n    },\n    clear: function () {\n        this.pool = [];\n        this.writen = this.position = 0;\n    }\n};\nmodule.exports = TinyStream;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/binary.js\n ** module id = 11\n ** module chunks = 0\n **/","var parser = require('./messageParser');\nvar mapping = require('../mapping');\nvar ack = require('./messageCallback');\nvar tool = require('../tool');\nvar entity=require('../message/MessageEntity');\nvar self = null;\nfunction MessageHandler(client) {\n    if (!mapping._ReceiveMessageListener) {\n        throw new Error(\"please set onReceiveMessageListener\");\n    }\n    self = this;\n    this.context = client;\n    this._map = {};\n    this._onReceived = mapping._ReceiveMessageListener.onReceived;\n    this.connectCallback = null;\n}\nMessageHandler.prototype.putCallback = function (callbackObj, _publishMessageId, _msg) {\n    var item = {\n        Callback: callbackObj,\n        Message: _msg\n    };\n    item.Callback.resumeTimer();\n    this._map[_publishMessageId] = item;\n};\n//设置连接回调对象，启动定时器\nMessageHandler.prototype.setConnectCallback = function (_connectCallback) {\n    if (_connectCallback) {\n        this.connectCallback = new ack.ConnectAck(_connectCallback.onSuccess, _connectCallback.onError, this.context);\n        this.connectCallback.resumeTimer();\n    }\n};\n//处理具体的消息对象\nMessageHandler.prototype.onReceived = function (msg) {\n    //实体对象\n    var entity;\n    if (msg.constructor._name != \"PublishMessage\") {\n        //如果msg不是一个内置消息对象，直接赋值给实体，进行下一步处理\n        entity = msg;\n        tool.cookieHelper.setItem(this.context.userId, tool.int64ToTimestamp(entity.dataTime));\n    } else {\n        if (msg.getTopic() == \"s_ntf\") {\n            entity = Modules.NotifyMsg.decode(msg.getData());\n            this.context.syncTime(entity.type, tool.int64ToTimestamp(entity.time));\n            return;\n        } else if (msg.getTopic() == \"s_msg\") {\n            entity = Modules.DownStreamMessage.decode(msg.getData());\n            tool.cookieHelper.setItem(this.context.userId, tool.int64ToTimestamp(entity.dataTime));\n        } else {\n            return;\n        }\n    }\n    //解析实体对象为消息对象。\n    var message = parser(entity);\n    if (message.getObjectName() in mapping.sysNtf) {\n        this._onReceived(message);\n        return;\n    }\n    //创建会话对象\n    var con = RongIMClient.getInstance().getConversationList().get(message.getConversationType(), message.getTargetId());\n    if (!con) {\n        con = RongIMClient.getInstance().createConversation(message.getConversationType(), message.getTargetId(), \"\");\n    }\n    //根据messageTag判断是否进行消息数累加\n    if (/ISCOUNTED/.test(message.getMessageTag())) {\n        con.getConversationType() != 0 && con.setUnreadMessageCount(con.getUnreadMessageCount() + 1);\n    }\n    con.setReceivedTime((new Date).getTime());\n    con.setReceivedStatus(new RongIMClient.ReceivedStatus());\n    con.setSenderUserId(message.getSenderUserId());\n    con.setObjectName(message.getObjectName());\n    con.setNotificationStatus(RongIMClient.ConversationNotificationStatus.DO_NOT_DISTURB);\n    con.setLatestMessageId(message.getMessageId());\n    con.setLatestMessage(message);\n    con.setTop();\n    //把消息传递给消息监听器\n    this._onReceived(message);\n};\n//处理通道对象传送过来的内置消息对象\nMessageHandler.prototype.handleMessage = function (msg) {\n    if (!msg) {\n        return\n    }\n    switch (msg.constructor._name) {\n        case \"ConnAckMessage\":\n            self.connectCallback.process(msg.getStatus(), msg.getUserId());\n            break;\n        case \"PublishMessage\":\n            if (msg.getQos() != 0) {\n                self.context.channel.writeAndFlush(new entity.PubAckMessage(msg.getMessageId()));\n            }\n            //如果是PublishMessage就把该对象给onReceived方法执行处理\n            self.onReceived(msg);\n            break;\n        case \"QueryAckMessage\":\n            if (msg.getQos() != 0) {\n                self.context.channel.writeAndFlush(new entity.QueryConMessage(msg.getMessageId()))\n            }\n            var temp = self._map[msg.getMessageId()];\n            if (temp) {\n                //执行回调操作\n                temp.Callback.process(msg.getStatus(), msg.getData(), msg.getDate(), temp.Message);\n                delete self._map[msg.getMessageId()];\n            }\n            break;\n        case \"PubAckMessage\":\n            var item = self._map[msg.getMessageId()];\n            if (item) {\n                //执行回调操作\n                item.Callback.process(msg.getStatus() || 0, msg.getDate(), item.Message);\n                delete self._map[msg.getMessageId()];\n            }\n            break;\n        case \"PingRespMessage\":\n            self.context.pauseTimer();\n            break;\n        case \"DisconnectMessage\":\n            self.context.channel.disconnect(msg.getStatus());\n            break;\n        default:\n    }\n};\nmodule.exports = MessageHandler;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/core/messageHandler.js\n ** module id = 12\n ** module chunks = 0\n **/","/**\n * Created by zhangyatao on 16/1/7.\n */\n\nvar com = require('../mapping');\nvar tool=require('../tool');\n//消息转换方法\nfunction messageParser(entity) {\n    var message, content = entity.content;\n    var result, objectName = entity.classname;\n\n    try {\n        result = JSON.parse(RongBinaryHelper.readUTF(content.offset ? tool.arrayFrom(content.buffer).slice(content.offset, content.limit) : content))\n    } catch (ex) {\n        return null;\n    }\n\n    //处理表情\n    if (\"Expression\" in RongIMClient && \"RC:TxtMsg\" == objectName && result.content) {\n        result.content = result.content.replace(/[\\uf000-\\uf700]/g, function (x) {\n            return RongIMClient.Expression.calcUTF(x) || x;\n        })\n    }\n\n    //映射为具体消息对象\n    if (objectName in com.typeMapping) {\n        message = new RongIMClient[com.typeMapping[objectName]](result);\n    } else if (objectName in com.sysNtf) {\n        message = new RongIMClient[com.sysNtf[objectName]](result);\n    } else if (objectName in com.registerMessageTypeMapping) {\n        //自定义消息\n        message = new RongIMClient[com.registerMessageTypeMapping[objectName]](result);\n    } else {\n        //未知消息\n        message = new RongIMClient.UnknownMessage(result, objectName);\n    }\n\n    //根据实体对象设置message对象\n    message.setSentTime(tool.int64ToTimestamp(entity.dataTime));\n    message.setSenderUserId(entity.fromUserId);\n    message.setConversationType(RongIMClient.ConversationType.setValue(com.mapping[entity.type]));\n    message.setTargetId(/^[234]$/.test(entity.type || entity.getType()) ? entity.groupId : message.getSenderUserId());\n    if (entity.fromUserId == com.userId) {\n        message.setMessageDirection(RongIMClient.MessageDirection.SEND);\n    } else {\n        message.setMessageDirection(RongIMClient.MessageDirection.RECEIVE);\n    }\n    message.setReceivedTime((new Date).getTime());\n    message.setMessageId(message.getConversationType() + \"_\" + ~~(Math.random() * 0xffffff));\n    message.setReceivedStatus(new RongIMClient.ReceivedStatus());\n    return message;\n}\nmodule.exports = messageParser;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/core/messageParser.js\n ** module id = 13\n ** module chunks = 0\n **/","var tool = require('../tool');\nvar mapping = require('../mapping');\nvar factory = require('../io/factory');\n//protobuf映射\nfunction callbackMapping(entity, tag) {\n    switch (tag) {\n        case \"GetUserInfoOutput\":\n            var userInfo = new RongIMClient.UserInfo();\n            userInfo.setUserId(entity.userId);\n            userInfo.setUserName(entity.userName);\n            userInfo.setPortraitUri(entity.userPortrait);\n            return userInfo;\n        case \"GetQNupTokenOutput\":\n            return {\n                deadline: util.int64ToTimestamp(entity.deadline),\n                token: entity.token\n            };\n        case \"GetQNdownloadUrlOutput\":\n            return {\n                downloadUrl: entity.downloadUrl\n            };\n        case \"CreateDiscussionOutput\":\n            return entity.id;\n        case \"ChannelInfoOutput\":\n            var disInfo = new RongIMClient.Discussion();\n            disInfo.setCreatorId(entity.adminUserId);\n            disInfo.setId(entity.channelId);\n            disInfo.setMemberIdList(entity.firstTenUserIds);\n            disInfo.setName(entity.channelName);\n            disInfo.setOpen(RongIMClient.DiscussionInviteStatus.setValue(entity.openStatus));\n            return disInfo;\n        case \"GroupHashOutput\":\n            return entity.result;\n        case \"QueryBlackListOutput\":\n            return entity.userIds;\n        default:\n            return entity;\n    }\n}\nfunction MessageCallback(error) {\n    var timeoutMillis, me = this;\n    this.timeout = null;\n    this.onError = null;\n    if (error && typeof error == \"number\") {\n        timeoutMillis = error\n    } else {\n        timeoutMillis = 6000;\n        this.onError = error;\n    }\n    this.resumeTimer = function () {\n        if (timeoutMillis > 0 && !this.timeout) {\n            this.timeout = setTimeout(function () {\n                me.readTimeOut(true);\n            }, timeoutMillis)\n        }\n    }\n}\nMessageCallback.prototype = {\n    pauseTimer: function () {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n            this.timeout = null\n        }\n    }, readTimeOut: function (isTimeout) {\n        if (isTimeout && this.onError) {\n            this.onError(RongIMClient.callback.ErrorCode.TIMEOUT)\n        } else {\n            this.pauseTimer()\n        }\n    }\n};\n//发送PublishMessage消息回调类\nfunction PublishCallback(cb, _timeout) {\n    MessageCallback.call(this, _timeout);\n    this.done = cb || function () {\n        };\n    this.fail = _timeout || function () {\n        };\n}\ntool.inherit(PublishCallback, MessageCallback);\nPublishCallback.prototype.process = function (_staus, _serverTime, _msg) {\n    this.readTimeOut();\n    if (_staus == 0) {\n        if (_msg) {\n            //把发送的消息发送状态改为已接收\n            _msg.setSentStatus(RongIMClient.SentStatus.RECEIVED)\n        }\n        this.done();\n    } else {\n        this.fail(RongIMClient.SendErrorStatus.setValue(_staus));\n    }\n};\nPublishCallback.prototype.readTimeOut = function (x) {\n    PublishCallback.super_.prototype.readTimeOut.call(this, x)\n};\n\n//发送QueryMessage消息回调类\nfunction QueryCallback(cb, _timeout) {\n    MessageCallback.call(this, _timeout);\n    this.done = cb || function () {\n        };\n    this.fail = _timeout || function () {\n        };\n}\ntool.inherit(QueryCallback, MessageCallback);\nQueryCallback.prototype.process = function (status, data, serverTime, pbtype) {\n    this.readTimeOut();\n    if (pbtype && data && status == 0) {\n        try {\n            data = callbackMapping(Modules[pbtype].decode(data), pbtype);\n        } catch (e) {\n            this.fail(RongIMClient.callback.ErrorCode.UNKNOWN_ERROR);\n            return;\n        }\n        if (\"GetUserInfoOutput\" == pbtype) {\n            //pb类型为GetUserInfoOutput的话就把data放入userinfo缓存队列\n            mapping.userInfoMapping[data.getUserId()] = data;\n        }\n        this.done(data);\n    } else {\n        status > 0 ? this.fail(status) : this.done(status)\n    }\n};\nQueryCallback.prototype.readTimeOut = function (x) {\n    QueryCallback.super_.prototype.readTimeOut.call(this, x)\n};\n\n//连接回调类\nfunction ConnectAck(cb, _timeout, context) {\n    MessageCallback.call(this, _timeout);\n    this.context = context;\n    this.done = cb || function () {\n        };\n    this.fail = _timeout || function () {\n        };\n}\ntool.inherit(ConnectAck, MessageCallback);\nConnectAck.prototype.process = function (status, userId) {\n    this.readTimeOut();\n    if (status == 0) {\n        mapping.userId = this.context.userId = userId;\n        if (!RongIMClient.isNotPullMsg) {\n            this.context.syncTime();\n        }\n        if (mapping.reconnectSet.onSuccess) {\n            mapping.reconnectSet.onSuccess(userId);\n            try {\n                delete mapping.reconnectSet.onSuccess;\n            } catch (e) {\n            }\n        } else {\n            this.done(userId);\n        }\n        factory.getInstance().fire(\"StatusChanged\", 0);\n        factory.getInstance()._doQueue()\n    } else if (status == 6) {\n        var that = this;\n        ConnectAck.redirect(this.context.token, this.context.appId, function () {\n            that.context.clearHeartbeat();\n            ConnectAck.redirect();\n            that.context.channel.socket.fire(\"StatusChanged\", 2);\n        }, function () {\n            that.fail();\n        }, false);\n    } else {\n        if (mapping.reconnectSet.onError) {\n            mapping.reconnectSet.onError(RongIMClient.ConnectErrorStatus.setValue(status));\n            delete mapping.reconnectSet.onError;\n        } else {\n            this.fail(RongIMClient.ConnectErrorStatus.setValue(status))\n        }\n    }\n};\nConnectAck.prototype.readTimeOut = function (x) {\n    ConnectAck.super_.prototype.readTimeOut.call(this, x)\n};\nConnectAck.redirect = function () {\n};\n\nmodule.exports = {\n    MessageCallback: MessageCallback,\n    PublishCallback: PublishCallback,\n    QueryCallback: QueryCallback,\n    ConnectAck: ConnectAck\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/core/messageCallback.js\n ** module id = 14\n ** module chunks = 0\n **/","//var io = require('./base');\nvar util = require('../tool');\nvar WS = require('./websocket');\nvar XHR = require('./polling');\nvar _Transport = {\n    'websocket': WS,\n    'xhr-polling': XHR\n};\nvar Socket = function () {\n    this.options = {\n        token: \"\",\n        transports: [\"websocket\", \"xhr-polling\"]//主要有两种(websocket，flashsocket)、comet\n    };\n    this.connected = false;\n    this.connecting = false;\n    this._events = {};\n    this.currentURL = \"\";\n    this.transport = this.getTransport(util.getTransportType());\n    if (this.transport === null) {\n        throw new Error(\"the channel was not supported\")\n    }\n};\n//此方法用于生产通道对象\nSocket.prototype.getTransport = function (override) {\n    var i = 0,\n        transport = override || this.options.transports[i];\n    if (_Transport[transport] && _Transport[transport].check() && _Transport[transport].XDomainCheck()) {\n        return new _Transport[transport](this, {})\n    }\n    return null;\n};\n//连接服务器\nSocket.prototype.connect = function (url, cb) {\n    if (this.transport && arguments.length == 2) {\n        if (url) {\n            this.on(\"connect\", cb || function () {\n                })\n        }\n        if (this.connecting || this.connected) {\n            this.disconnect()\n        }\n        this.connecting = true;\n        if (url) {\n            this.currentURL = url\n        }\n        this.transport.connect(this.currentURL); //是否重连\n    }\n    return this\n};\nSocket.prototype.send = function (data) {\n    if (!this.transport || !this.connected) {\n        //如果通道不可用，把消息压入队列中，等到通道可用时处理\n        return this._queue(data)\n    }\n    this.transport.send(data)\n};\nSocket.prototype.disconnect = function (callback) {\n    if (callback) {\n        //出发状态改变观察者\n        this.fire(\"StatusChanged\", callback)\n    }\n    this.transport.disconnect();\n    return this;\n};\nSocket.prototype.reconnect = function () {\n    if (this.currentURL) {\n        return this.connect(null, null);\n    } else {\n        throw new Error(\"reconnect:no have URL\");\n    }\n};\nSocket.prototype.fire = function (x, args) {\n    if (x in this._events) {\n        for (var i = 0, ii = this._events[x].length; i < ii; i++) {\n            this._events[x][i](args);\n        }\n    }\n    return this\n};\nSocket.prototype.removeEvent = function (x, fn) {\n    if (x in this._events) {\n        for (var a = 0, l = this._events[x].length; a < l; a++) {\n            if (this._events[x][a] == fn) {\n                this._events[x].splice(a, 1)\n            }\n        }\n    }\n    return this\n};\nSocket.prototype._queue = function (message) {\n    if (!(\"_queueStack\" in this)) {\n        this._queueStack = []\n    }\n    this._queueStack.push(message);\n    return this\n};\nSocket.prototype._doQueue = function () {\n    if (!(\"_queueStack\" in this) || !this._queueStack.length) {\n        return this\n    }\n    for (var i = 0; i < this._queueStack.length; i++) {\n        this.transport.send(this._queueStack[i])\n    }\n    this._queueStack = [];\n    return this\n};\nSocket.prototype._onConnect = function () {\n    this.connected = true;\n    this.connecting = false;\n    util.cookieHelper.setItem(\"rongSDK\",util.getTransportType());\n    this.fire(\"connect\");\n};\nSocket.prototype._onMessage = function (data) {\n    this.fire(\"message\", data)\n};\nSocket.prototype._onDisconnect = function () {\n    var wasConnected = this.connected;\n    this.connected = false;\n    this.connecting = false;\n    this._queueStack = [];\n    if (wasConnected) {\n        this.fire(\"disconnect\")\n    }\n};\n//注册观察者\nSocket.prototype.on = function (x, func) {\n    if (!(typeof func == \"function\" && x)) {\n        return this\n    }\n    if (x in this._events) {\n        util.indexOf(this._events, func) == -1 && this._events[x].push(func)\n    } else {\n        this._events[x] = [func];\n    }\n    return this\n};\n\nvar connect = function (token, args) {\n    var instance = new Socket();\n    connect.getInstance = function () {\n        return instance\n    };\n    instance.connect(token, args);\n    return instance;\n};\n\nmodule.exports = connect;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/io/factory.js\n ** module id = 15\n ** module chunks = 0\n **/","var Transport = require('./base');\nvar util = require('../tool');\nvar tinyStream = require('../binary');\nvar IOStream = require('../message/throttleStream');\nvar mapping = require('../mapping');\nvar WS = Transport.websocket = function () {\n    Transport.apply(this, arguments)\n};\nutil.inherit(WS, Transport);\nWS.prototype.type = \"websocket\";\nWS.prototype.connect = function (url) {\n    var self = this;\n    //操作html5 websocket API\n    this.socket = new WebSocket(\"ws://\" + url);\n    this.socket.binaryType = \"arraybuffer\";\n    this.socket.onopen = function () {\n        self._onConnect();\n    };\n    this.socket.onmessage = function (ev) {\n        //判断数据是不是字符串，如果是字符串那么就是flash传过来的。\n        if (typeof ev.data == \"string\") {\n            self._decode(ev.data.split(\",\"))\n        } else {\n            self._decode(ev.data)\n        }\n    };\n    this.socket.onclose = function () {\n        self._onClose()\n    };\n    this.socket.onerror = function () {\n        //当websocket执行出错的时候，判断是否已经注册了重连对象。有的话就执行重连对象的onError，没有的话主动抛出一个错误\n        if (mapping.reconnectSet.onError) {\n            mapping.reconnectSet.onError(RongIMClient.ConnectErrorStatus.setValue(2));\n            delete mapping.reconnectSet.onError;\n        } else {\n            throw new Error(\"network is unavailable or unknown error\");\n        }\n    };\n    return this\n};\n//发送数据到服务器\nWS.prototype.send = function (data) {\n    var stream = new tinyStream([]),\n        msg = new IOStream.MessageOutputStream(stream);\n    msg.writeMessage(data);\n    var val = stream.getBytesArray(true);\n    if (this.socket.readyState == 1) {\n        if (util.getType(global.Int8Array) === 'Function' && !mapping.globalConf.WEB_SOCKET_FORCE_FLASH) {\n            //Int8Array为html5 API\n            var binary = new Int8Array(val);\n            this.socket.send(binary.buffer)\n        } else {\n            this.socket.send(val + \"\")\n        }\n    }\n    return this\n};\nWS.prototype.disconnect = function () {\n    if (this.socket) {\n        this.socket.close()\n    }\n    return this\n};\nWS.prototype._onClose = function () {\n    this._onDisconnect();\n    return this\n};\nWS.check = function () {\n    return \"WebSocket\" in global && WebSocket.prototype && WebSocket.prototype.send && typeof WebSocket !== \"undefined\"\n};\nWS.XDomainCheck = function () {\n    return true;\n};\nmodule.exports = WS;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/io/websocket.js\n ** module id = 16\n ** module chunks = 0\n **/","var util = require('../tool');\nvar IOstream = require('../Message/throttleStream');\nvar mapping=require('../mapping');\nvar global = window;\n//获取消息id标识符对象，如果是comet消息通道就将messageid放入本地存储(localstorage或cookie)中。其他消息通道则放入内存中。\n\nvar Transport = function (base, options) {\n    this.base = base;\n    this.options = {\n        timeout: 30000\n    };\n    util.merge(this.options, options)\n};\nTransport.prototype.send = function () {\n    throw new Error(\"No rewrite send() method\")\n};\nTransport.prototype.connect = function () {\n    throw new Error(\"No rewrite connect() method\")\n};\nTransport.prototype.disconnect = function () {\n    throw new Error(\"No rewrite disconnect() method\")\n};\n//此方法只有comet用到\nTransport.prototype._encode = function (x) {\n    var str = \"?messageid=\" + x.getMessageId() + \"&header=\" + x.getHeaderFlag() + \"&sessionid=\" + util.cookieHelper.getItem(mapping.Endpoint.userId + \"sId\");\n    if (!/(PubAckMessage|QueryConMessage)/.test(x.constructor._name)) {\n        str += \"&topic=\" + x.getTopic() + \"&targetid=\" + (x.getTargetId() || \"\");\n    }\n    return {\n        url: str,\n        data: \"getData\" in x ? x.getData() : \"\"\n    };\n};\n//转化服务器返回的二进制数组为一个具体的消息对象\nTransport.prototype._decode = function (data) {\n    if (!data) {\n        return;\n    }\n    if (util.isArray(data)) {\n        this._onMessage(new IOstream.MessageInputStream(data).readMessage());\n    } else if (util.getType(data) === \"ArrayBuffer\") {\n        this._onMessage(new IOstream.MessageInputStream(util.arrayFrom(data)).readMessage());\n    }\n};\n//此方法只有comet用到。接收服务器返回的json对象\nTransport.prototype._onData = function (data, header) {\n    if (!data || data == \"lost params\") {\n        return;\n    }\n    if (header) {\n        util.cookieHelper.getItem(mapping.Endpoint.userId + \"sId\") || util.cookieHelper.setItem(mapping.Endpoint.userId + \"sId\", header);\n    }\n    var self = this, val = util.JSON.parse(data);\n    if (!util.isArray(val)) {\n        val = [val];\n    }\n    util.forEach(val, function (x) {\n        self._onMessage(new IOstream.MessageInputStream(x, true).readMessage());\n    });\n};\nTransport.prototype._onMessage = function (message) {\n    this.base._onMessage(message)\n};\nTransport.prototype._onConnect = function () {\n    this.connected = true;\n    this.connecting = false;\n    this.base._onConnect()\n};\nTransport.prototype._onDisconnect = function () {\n    this.connecting = false;\n    this.connected = false;\n    this.base._onDisconnect()\n};\nTransport.prototype._baseConnect = function () {\n    this.base.connect(null, null);\n};\n\nmodule.exports = Transport;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/io/base.js\n ** module id = 17\n ** module chunks = 0\n **/","var TinyStream = require('../binary');\nvar Message = require('./Message');\nvar eneity = require('./MessageEntity');\n\nfunction output(_out) {\n    var out = TinyStream.parse(_out);\n    this.writeMessage = function (msg) {\n        if (msg instanceof Message.Message) {\n            msg.write(out)\n        }\n    }\n}\n//converted input stream to message object ,that was server send to client，把服务器返回的二进制流生成具体的消息对象\nfunction input(In, isPolling) {\n    var flags, header, msg = null;\n    if (!isPolling) {\n        var _in = TinyStream.parse(In);\n        flags = _in.readByte();\n    } else {\n        flags = In[\"headerCode\"];\n    }\n    header = new Message.Header(flags);\n    this.readMessage = function () {\n        switch (+header.getType()) {\n            case 2:\n                msg = new eneity.ConnAckMessage(header);\n                break;\n            case 3:\n                msg = new eneity.PublishMessage(header);\n                break;\n            case 4:\n                msg = new eneity.PubAckMessage(header);\n                break;\n            case 5:\n                msg = new eneity.QueryMessage(header);\n                break;\n            case 6:\n                msg = new eneity.QueryAckMessage(header);\n                break;\n            case 7:\n                msg = new eneity.QueryConMessage(header);\n                break;\n            case 9:\n            case 11:\n            case 13:\n                msg = new eneity.PingRespMessage(header);\n                break;\n            case 1:\n                msg = new eneity.ConnectMessage(header);\n                break;\n            case 8:\n            case 10:\n            case 12:\n                msg = new eneity.PingReqMessage(header);\n                break;\n            case 14:\n                msg = new eneity.DisconnectMessage(header);\n                break;\n            default:\n                throw new Error(\"No support for deserializing \" + header.getType() + \" messages\")\n        }\n        if (isPolling) {\n            msg.init(In);\n        } else {\n            msg.read(_in, In.length - 1);\n        }\n        return msg\n    }\n}\nmodule.exports = {\n    MessageOutputStream: output,\n    MessageInputStream: input\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/Message/throttleStream.js\n ** module id = 18\n ** module chunks = 0\n **/","/**\n * 消息类，对java逻辑的重新实现\n * */\nvar e = require('./msgEnum');\nvar TinyStream = require('../binary');\nvar Qos = e.Qos;\nvar Type = e.Type;\nfunction Message(argu) {\n    var _header, _headerCode, lengthSize = 0;\n    if (argu instanceof Header) {\n        _header = argu\n    } else {\n        _header = new Header(argu, false, Qos.AT_MOST_ONCE, false)\n    }\n    this.write = function (Out) {\n        var out = TinyStream.parse(Out);\n        _headerCode = this.getHeaderFlag();\n        out.write(_headerCode);\n        this.writeMessage(out);\n        return out\n    };\n    this.getHeaderFlag = function () {\n        return _header.encode();\n    };\n    this.getLengthSize = function () {\n        return lengthSize\n    };\n    this.setRetained = function (retain) {\n        _header.retain = retain\n    };\n    this.isRetained = function () {\n        return _header.retain\n    };\n    this.setQos = function (qos) {\n        _header.qos = qos instanceof Qos ? qos : Qos.setValue(qos);\n    };\n    this.getQos = function () {\n        return _header.qos\n    };\n    this.setDup = function (dup) {\n        _header.dup = dup\n    };\n    this.isDup = function () {\n        return _header.dup\n    };\n    this.getType = function () {\n        return _header.type\n    };\n}\nMessage._name = \"Message\";\nMessage.prototype = {\n    read: function (In, length) {\n        this.readMessage(In, length)\n    },\n    toBytes: function () {\n        return this.write([]).getBytesArray()\n    }, messageLength: function () {\n        return 0\n    }, writeMessage: function (out) {\n    }, readMessage: function (In) {\n    }, init: function (args) {\n        var valName, nana;\n        for (nana in args) {\n            if (!args.hasOwnProperty(nana))\n                continue;\n            valName = nana.replace(/^\\w/, function (x) {\n                var tt = x.charCodeAt(0);\n                return 'set' + (tt >= 0x61 ? String.fromCharCode(tt & ~32) : x)\n            });\n            if (valName in this) {\n                this[valName](args[nana])\n            }\n        }\n    }\n};\nfunction Header(_type, _retain, _qos, _dup) {\n    this.type = null;\n    this.retain = false;\n    this.qos = Qos.AT_LEAST_ONCE;\n    this.dup = false;\n    if (_type && +_type == _type && arguments.length == 1) {\n        this.retain = (_type & 1) > 0;\n        this.qos = Qos.setValue((_type & 6) >> 1);\n        this.dup = (_type & 8) > 0;\n        this.type = Type.setValue((_type >> 4) & 15);\n    } else {\n        this.type = Type.setValue(_type);\n        this.retain = _retain;\n        this.qos = Qos.setValue(_qos);\n        this.dup = _dup;\n    }\n}\nHeader.prototype = {\n    getType: function () {\n        return this.type\n    }, encode: function () {\n        var _byte = (this.type << 4);\n        _byte |= this.retain ? 1 : 0;\n        _byte |= this.qos << 1;\n        _byte |= this.dup ? 8 : 0;\n        return _byte\n    }, toString: function () {\n        return \"Header [type=\" + this.type + \",retain=\" + this.retain + \",qos=\" + this.qos + \",dup=\" + this.dup + \"]\"\n    }\n};\nmodule.exports = {\n    Message: Message,\n    Header: Header\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/Message/Message.js\n ** module id = 19\n ** module chunks = 0\n **/","var myEnum = require('../enum');\nvar Qos = myEnum({AT_MOST_ONCE: 0, AT_LEAST_ONCE: 1, EXACTLY_ONCE: 2, DEFAULT: 3}),\n    Type = myEnum({\n        CONNECT: 1,\n        CONNACK: 2,\n        PUBLISH: 3,\n        PUBACK: 4,\n        QUERY: 5,\n        QUERYACK: 6,\n        QUERYCON: 7,\n        SUBSCRIBE: 8,\n        SUBACK: 9,\n        UNSUBSCRIBE: 10,\n        UNSUBACK: 11,\n        PINGREQ: 12,\n        PINGRESP: 13,\n        DISCONNECT: 14\n    }),\n    DisconnectionStatus = myEnum({\n        RECONNECT: 0,\n        OTHER_DEVICE_LOGIN: 1,\n        CLOSURE: 2,\n        UNKNOWN_ERROR: 3,\n        LOGOUT: 4,\n        BLOCK: 5\n    }),\n    ConnectionState = myEnum({\n        ACCEPTED: 0,\n        UNACCEPTABLE_PROTOCOL_VERSION: 1,\n        IDENTIFIER_REJECTED: 2,\n        SERVER_UNAVAILABLE: 3,\n        TOKEN_INCORRECT: 4,\n        NOT_AUTHORIZED: 5,\n        REDIRECT: 6,\n        PACKAGE_ERROR: 7,\n        APP_BLOCK_OR_DELETE: 8,\n        BLOCK: 9,\n        TOKEN_EXPIRE: 10,\n        DEVICE_ERROR: 11\n    });\nmodule.exports = {\n    Qos: Qos,\n    Type: Type,\n    DisconnectionStatus: DisconnectionStatus,\n    ConnectionState: ConnectionState\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/Message/msgEnum.js\n ** module id = 20\n ** module chunks = 0\n **/","var msg = require('./Message');\nvar TinyStream = require('../binary');\nvar e = require('./msgEnum');\nvar util = require('../tool');\nvar Message = msg.Message;\nvar Header = msg.Header;\nvar Type = e.Type;\nvar ConnectionState = e.ConnectionState;\nvar DisconnectionStatus = e.DisconnectionStatus;\nfunction ConnectMessage() {\n    var CONNECT_HEADER_SIZE = 12,\n        protocolId = \"RCloud\",\n        protocolVersion = 3,\n        clientId, keepAlive, appId, token, cleanSession, willTopic, will, willQos, retainWill, hasAppId, hasToken, hasWill;\n    switch (arguments.length) {\n        case 0:\n            Message.call(this, Type.CONNECT);\n            break;\n        case 1:\n            Message.call(this, arguments[0]);\n            break;\n        case 3:\n            Message.call(this, Type.CONNECT);\n            if (!arguments[0] || arguments[0].length > 64) {\n                throw new Error(\"ConnectMessage:Client Id cannot be null and must be at most 64 characters long: \" + arguments[0])\n            }\n            clientId = arguments[0];\n            cleanSession = arguments[1];\n            keepAlive = arguments[2];\n            break\n    }\n    this.messageLength = function () {\n        var payloadSize = TinyStream.toMQTString(clientId).length;\n        payloadSize += TinyStream.toMQTString(willTopic).length;\n        payloadSize += TinyStream.toMQTString(will).length;\n        payloadSize += TinyStream.toMQTString(appId).length;\n        payloadSize += TinyStream.toMQTString(token).length;\n        return payloadSize + CONNECT_HEADER_SIZE\n    };\n    this.readMessage = function (In) {\n        var stream = TinyStream.parse(In);\n        protocolId = stream.readUTF();\n        protocolVersion = stream.readByte();\n        var cFlags = stream.readByte();\n        hasAppId = (cFlags & 128) > 0;\n        hasToken = (cFlags & 64) > 0;\n        retainWill = (cFlags & 32) > 0;\n        willQos = cFlags >> 3 & 3;\n        hasWill = (cFlags & 4) > 0;\n        cleanSession = (cFlags & 32) > 0;\n        keepAlive = stream.read() * 256 + stream.read();\n        clientId = stream.readUTF();\n        if (hasWill) {\n            willTopic = stream.readUTF();\n            will = stream.readUTF()\n        }\n        if (hasAppId) {\n            try {\n                appId = stream.readUTF()\n            } catch (ex) {\n            }\n        }\n        if (hasToken) {\n            try {\n                token = stream.readUTF()\n            } catch (ex) {\n            }\n        }\n        return stream\n    };\n    this.writeMessage = function (out) {\n        var stream = TinyStream.parse(out);\n        stream.writeUTF(protocolId);\n        stream.write(protocolVersion);\n        var flags = cleanSession ? 2 : 0;\n        flags |= hasWill ? 4 : 0;\n        flags |= willQos ? willQos >> 3 : 0;\n        flags |= retainWill ? 32 : 0;\n        flags |= hasToken ? 64 : 0;\n        flags |= hasAppId ? 128 : 0;\n        stream.write(flags);\n        stream.writeChar(keepAlive);\n        stream.writeUTF(clientId);\n        if (hasWill) {\n            stream.writeUTF(willTopic);\n            stream.writeUTF(will)\n        }\n        if (hasAppId) {\n            stream.writeUTF(appId)\n        }\n        if (hasToken) {\n            stream.writeUTF(token)\n        }\n        return stream\n    };\n}\nConnectMessage._name = \"ConnectMessage\";\nutil.inherit(ConnectMessage, Message, true);\nfunction ConnAckMessage() {\n    var status, userId, MESSAGE_LENGTH = 2;\n    switch (arguments.length) {\n        case 0:\n            Message.call(this, Type.CONNACK);\n            break;\n        case 1:\n            if (arguments[0] instanceof Header) {\n                Message.call(this, arguments[0])\n            } else {\n                if (arguments[0] instanceof ConnectionState) {\n                    Message.call(this, Type.CONNACK);\n                    if (arguments[0] == null) {\n                        throw new Error(\"ConnAckMessage:The status of ConnAskMessage can't be null\")\n                    }\n                    status = arguments[0]\n                }\n            }\n    }\n    this.messageLength = function () {\n        var length = MESSAGE_LENGTH;\n        if (userId) {\n            length += TinyStream.toMQTString(userId).length\n        }\n        return length\n    };\n    this.readMessage = function (In, msglength) {\n        var stream = TinyStream.parse(In);\n        stream.read();\n        var result = +stream.read();\n        if (result >= 0 && result <= 9) {\n            this.setStatus(result);\n        } else {\n            throw new Error(\"Unsupported CONNACK code:\" + result)\n        }\n        if (msglength > MESSAGE_LENGTH) {\n            this.setUserId(stream.readUTF())\n        }\n    };\n    this.writeMessage = function (out) {\n        var stream = TinyStream.parse(out);\n        stream.write(128);\n        switch (+status) {\n            case 0:\n            case 1:\n            case 2:\n            case 5:\n            case 6:\n                stream.write(+status);\n                break;\n            case 3:\n            case 4:\n                stream.write(3);\n                break;\n            default:\n                throw new Error(\"Unsupported CONNACK code:\" + status);\n        }\n        if (userId) {\n            stream.writeUTF(userId)\n        }\n        return stream\n    };\n    this.getStatus = function () {\n        return status\n    };\n    this.setStatus = function (x) {\n        status = x instanceof ConnectionState ? x : ConnectionState.setValue(x);\n    };\n    this.setUserId = function (_userId) {\n        userId = _userId\n    };\n    this.getUserId = function () {\n        return userId\n    };\n}\nConnAckMessage._name = \"ConnAckMessage\";\nutil.inherit(ConnAckMessage, Message, true);\nfunction DisconnectMessage(one) {\n    var status;\n    this.MESSAGE_LENGTH = 2;\n    if (one instanceof Header) {\n        Message.call(this, one)\n    } else {\n        Message.call(this, Type.DISCONNECT);\n        if (one instanceof DisconnectionStatus) {\n            status = one\n        }\n    }\n    this.messageLength = function () {\n        return this.MESSAGE_LENGTH\n    };\n    this.readMessage = function (In) {\n        var _in = TinyStream.parse(In);\n        _in.read();\n        var result = +_in.read();\n        if (result >= 0 && result <= 5) {\n            this.setStatus(result);\n        } else {\n            throw new Error(\"Unsupported CONNACK code:\" + result)\n        }\n    };\n    this.writeMessage = function (Out) {\n        var out = TinyStream.parse(Out);\n        out.write(0);\n        if (+status >= 1 && +status <= 3) {\n            out.write((+status) - 1);\n        } else {\n            throw new Error(\"Unsupported CONNACK code:\" + status)\n        }\n    };\n    this.setStatus = function (x) {\n        status = x instanceof DisconnectionStatus ? x : DisconnectionStatus.setValue(x);\n    };\n    this.getStatus = function () {\n        return status\n    };\n}\nDisconnectMessage._name = \"DisconnectMessage\";\nutil.inherit(DisconnectMessage, Message, true);\nfunction PingReqMessage(header) {\n    if (header && header instanceof Header) {\n        Message.call(this, header)\n    } else {\n        Message.call(this, Type.PINGREQ)\n    }\n}\nPingReqMessage._name = \"PingReqMessage\";\nutil.inherit(PingReqMessage, Message, true);\nfunction PingRespMessage(header) {\n    if (header && header instanceof Header) {\n        Message.call(this, header)\n    } else {\n        Message.call(this, Type.PINGRESP)\n    }\n}\nPingRespMessage._name = \"PingRespMessage\";\nutil.inherit(PingRespMessage, Message, true);\nfunction RetryableMessage(argu) {\n    var messageId;\n    Message.call(this, argu);\n    this.messageLength = function () {\n        return 2\n    };\n    this.writeMessage = function (Out) {\n        var out = TinyStream.parse(Out),\n            Id = this.getMessageId(),\n            lsb = Id & 255,\n            msb = (Id & 65280) >> 8;\n        out.write(msb);\n        out.write(lsb);\n        return out\n    };\n    this.readMessage = function (In) {\n        var _in = TinyStream.parse(In),\n            msgId = _in.read() * 256 + _in.read();\n        this.setMessageId(parseInt(msgId, 10));\n    };\n    this.setMessageId = function (_messageId) {\n        messageId = _messageId\n    };\n    this.getMessageId = function () {\n        return messageId\n    }\n}\nRetryableMessage._name = \"RetryableMessage\";\nutil.inherit(RetryableMessage, Message, true);\nfunction PubAckMessage(args) {\n    var status, msgLen = 2,\n        date = 0;\n    if (args instanceof Header) {\n        RetryableMessage.call(this, args)\n    } else {\n        RetryableMessage.call(this, Type.PUBACK);\n        this.setMessageId(args)\n    }\n    this.messageLength = function () {\n        return msgLen\n    };\n    this.writeMessage = function (Out) {\n        var out = TinyStream.parse(Out);\n        PubAckMessage.prototype.writeMessage.call(this, out)\n    };\n    this.readMessage = function (In) {\n        var _in = TinyStream.parse(In);\n        PubAckMessage.prototype.readMessage.call(this, _in);\n        date = _in.readInt();\n        status = _in.read() * 256 + _in.read()\n    };\n    this.setStatus = function (x) {\n        status = x;\n    };\n    this.getStatus = function () {\n        return status\n    };\n    this.getDate = function () {\n        return date\n    };\n}\nPubAckMessage._name = \"PubAckMessage\";\nutil.inherit(PubAckMessage, RetryableMessage, true);\nfunction PublishMessage(one, two, three) {\n    var topic, data, targetId, date;\n    if (arguments.length == 1 && one instanceof Header) {\n        RetryableMessage.call(this, one)\n    } else {\n        if (arguments.length == 3) {\n            RetryableMessage.call(this, Type.PUBLISH);\n            topic = one;\n            targetId = three;\n            data = typeof two == \"string\" ? TinyStream.toMQTString(two) : two;\n        }\n    }\n    this.messageLength = function () {\n        var length = 10;\n        length += TinyStream.toMQTString(topic).length;\n        length += TinyStream.toMQTString(targetId).length;\n        length += data.length;\n        return length\n    };\n    this.writeMessage = function (Out) {\n        var out = TinyStream.parse(Out);\n        out.writeUTF(topic);\n        out.writeUTF(targetId);\n        PublishMessage.prototype.writeMessage.apply(this, arguments);\n        out.write(data)\n    };\n    this.readMessage = function (In, msgLength) {\n        var pos = 6,\n            _in = TinyStream.parse(In);\n        date = _in.readInt();\n        topic = _in.readUTF();\n        pos += TinyStream.toMQTString(topic).length;\n        PublishMessage.prototype.readMessage.apply(this, arguments);\n        data = new Array(msgLength - pos);\n        _in.read(data)\n    };\n    this.setTopic = function (x) {\n        topic = x;\n    };\n    this.setData = function (x) {\n        data = x;\n    };\n    this.setTargetId = function (x) {\n        targetId = x;\n    };\n    this.setDate = function (x) {\n        date = x;\n    };\n    this.setData = function (x) {\n        data = x;\n    };\n    this.getTopic = function () {\n        return topic\n    };\n    this.getData = function () {\n        return data\n    };\n    this.getTargetId = function () {\n        return targetId\n    };\n    this.getDate = function () {\n        return date\n    }\n}\nPublishMessage._name = \"PublishMessage\";\nutil.inherit(PublishMessage, RetryableMessage, true);\nfunction QueryMessage(one, two, three) {\n    var topic, data, targetId;\n    if (one instanceof Header) {\n        RetryableMessage.call(this, one)\n    } else {\n        if (arguments.length == 3) {\n            RetryableMessage.call(this, Type.QUERY);\n            data = typeof two == \"string\" ? TinyStream.toMQTString(two) : two;\n            topic = one;\n            targetId = three;\n        }\n    }\n    this.messageLength = function () {\n        var length = 0;\n        length += TinyStream.toMQTString(topic).length;\n        length += TinyStream.toMQTString(targetId).length;\n        length += 2;\n        length += data.length;\n        return length\n    };\n    this.writeMessage = function (Out) {\n        var out = TinyStream.parse(Out);\n        out.writeUTF(topic);\n        out.writeUTF(targetId);\n        this.constructor.prototype.writeMessage.call(this, out);\n        out.write(data)\n    };\n    this.readMessage = function (In, msgLength) {\n        var pos = 0,\n            _in = TinyStream.parse(In);\n        topic = _in.readUTF();\n        targetId = _in.readUTF();\n        pos += TinyStream.toMQTString(topic).length;\n        pos += TinyStream.toMQTString(targetId).length;\n        this.constructor.prototype.readMessage.apply(this, arguments);\n        pos += 2;\n        data = new Array(msgLength - pos);\n        _in.read(data)\n    };\n    this.setTopic = function (x) {\n        topic = x;\n    };\n    this.setData = function (x) {\n        data = x;\n    };\n    this.setTargetId = function (x) {\n        targetId = x;\n    };\n    this.getTopic = function () {\n        return topic\n    };\n    this.getData = function () {\n        return data\n    };\n    this.getTargetId = function () {\n        return targetId\n    };\n}\nQueryMessage._name = \"QueryMessage\";\nutil.inherit(QueryMessage, RetryableMessage, true);\nfunction QueryConMessage(messageId) {\n    if (messageId instanceof Header) {\n        RetryableMessage.call(this, messageId)\n    } else {\n        RetryableMessage.call(this, Type.QUERYCON);\n        this.setMessageId(messageId)\n    }\n}\nQueryConMessage._name = \"QueryConMessage\";\nutil.inherit(QueryConMessage, RetryableMessage, true);\nfunction QueryAckMessage(header) {\n    var data, status, date;\n    RetryableMessage.call(this, header);\n    this.readMessage = function (In, msgLength) {\n        var _in = TinyStream.parse(In);\n        QueryAckMessage.prototype.readMessage.call(this, _in);\n        date = _in.readInt();\n        status = _in.read() * 256 + _in.read();\n        if (msgLength > 0) {\n            data = new Array(msgLength - 8);\n            _in.read(data)\n        }\n    };\n    this.getStatus = function () {\n        return status\n    };\n    this.getDate = function () {\n        return date\n    };\n    this.setDate = function (x) {\n        date = x;\n    };\n    this.setStatus = function (x) {\n        status = x;\n    };\n    this.setData = function (x) {\n        data = x;\n    };\n    this.getData = function () {\n        return data\n    };\n}\nQueryAckMessage._name = \"QueryAckMessage\";\nutil.inherit(QueryAckMessage, RetryableMessage, true);\nmodule.exports = {\n    ConnectMessage: ConnectMessage,\n    ConnAckMessage: ConnAckMessage,\n    DisconnectMessage: DisconnectMessage,\n    PingReqMessage: PingReqMessage,\n    PingRespMessage: PingRespMessage,\n    RetryableMessage: RetryableMessage,\n    PubAckMessage: PubAckMessage,\n    PublishMessage: PublishMessage,\n    QueryMessage: QueryMessage,\n    QueryConMessage: QueryConMessage,\n    QueryAckMessage: QueryAckMessage\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/Message/MessageEntity.js\n ** module id = 21\n ** module chunks = 0\n **/","var TinyStream = require('../binary');\nvar Message = require('./Message');\nvar eneity = require('./MessageEntity');\n\nfunction output(_out) {\n    var out = TinyStream.parse(_out);\n    this.writeMessage = function (msg) {\n        if (msg instanceof Message.Message) {\n            msg.write(out)\n        }\n    }\n}\n//converted input stream to message object ,that was server send to client，把服务器返回的二进制流生成具体的消息对象\nfunction input(In, isPolling) {\n    var flags, header, msg = null;\n    if (!isPolling) {\n        var _in = TinyStream.parse(In);\n        flags = _in.readByte();\n    } else {\n        flags = In[\"headerCode\"];\n    }\n    header = new Message.Header(flags);\n    this.readMessage = function () {\n        switch (+header.getType()) {\n            case 2:\n                msg = new eneity.ConnAckMessage(header);\n                break;\n            case 3:\n                msg = new eneity.PublishMessage(header);\n                break;\n            case 4:\n                msg = new eneity.PubAckMessage(header);\n                break;\n            case 5:\n                msg = new eneity.QueryMessage(header);\n                break;\n            case 6:\n                msg = new eneity.QueryAckMessage(header);\n                break;\n            case 7:\n                msg = new eneity.QueryConMessage(header);\n                break;\n            case 9:\n            case 11:\n            case 13:\n                msg = new eneity.PingRespMessage(header);\n                break;\n            case 1:\n                msg = new eneity.ConnectMessage(header);\n                break;\n            case 8:\n            case 10:\n            case 12:\n                msg = new eneity.PingReqMessage(header);\n                break;\n            case 14:\n                msg = new eneity.DisconnectMessage(header);\n                break;\n            default:\n                throw new Error(\"No support for deserializing \" + header.getType() + \" messages\")\n        }\n        if (isPolling) {\n            msg.init(In);\n        } else {\n            msg.read(_in, In.length - 1);\n        }\n        return msg\n    }\n}\nmodule.exports = {\n    MessageOutputStream: output,\n    MessageInputStream: input\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/message/throttleStream.js\n ** module id = 22\n ** module chunks = 0\n **/","var Transport = require('./base');\nvar util = require('../tool');\nvar mapping=require('../mapping');\nvar global = window;\nvar empty = new Function;\n//利用withCredentials判断是否支持跨域操作\nvar XMLHttpRequestCORS = (function () {\n    if (!('XMLHttpRequest' in global))\n        return false;\n    var a = new XMLHttpRequest();\n    return a.withCredentials !== undefined;\n})();\n//生成跨域传输对象\nvar request = function () {\n    if ('XDomainRequest' in global)\n        return new global[\"XDomainRequest\"]();\n    if ('XMLHttpRequest' in global && XMLHttpRequestCORS)\n        return new XMLHttpRequest();\n    return false;\n};\nvar XHR = Transport.XHR = function () {\n    Transport.apply(this, arguments);\n};\nutil.inherit(XHR, Transport);\n//comet链接服务器，先从本地存储对象里是否存有当前登陆人员的sessionid，如果有的话就不再从服务器申请sessionid，直接用本地存储的sessionid链接服务器。\nXHR.prototype.connect = function (url) {\n    var sid = util.cookieHelper.getItem(mapping.Endpoint.userId + \"sId\"),\n        _that = this;\n    if (sid) {\n        //io.getInstance().currentURL = url;\n        setTimeout(function () {\n            _that.onopen(\"{\\\"status\\\":0,\\\"userId\\\":\\\"\" + mapping.Endpoint.userId + \"\\\",\\\"headerCode\\\":32,\\\"messageId\\\":0,\\\"sessionid\\\":\\\"\" + sid + \"\\\"}\");\n            _that._onConnect();\n        }, 500);\n        return this;\n    }\n    this._get(url);\n    return this;\n};\nXHR.prototype._checkSend = function (data) {\n    //格式化数据为comet指定的数据格式，然后发送\n    var encoded = this._encode(data);\n    this._send(encoded);\n};\nXHR.prototype.send = function (data) {\n    this._checkSend(data);\n    return this;\n};\n//利用post方法发送数据，有数据返回就执行_onData(responseText)方法\nXHR.prototype._send = function (data) {\n    var self = this;\n    this._sendXhr = this._request(mapping.Endpoint.host + \"/websocket\" + data.url, 'POST');\n    if (\"onload\" in this._sendXhr) {\n        this._sendXhr.onload = function () {\n            this.onload = empty;\n            self._onData(this.responseText);\n        };\n        this._sendXhr.onerror = function () {\n            this.onerror = empty;\n        };\n    } else {\n        this._sendXhr.onreadystatechange = function () {\n            if (this.readyState == 4) {\n                this.onreadystatechange = empty;\n                if (/^(202|200)$/.test(this.status)) {\n                    self._onData(this.responseText);\n                }\n            }\n        };\n    }\n    this._sendXhr.send(util.JSON.stringify(data.data));\n};\nXHR.prototype.disconnect = function () {\n    this._onDisconnect();\n    return this;\n};\n//断开连接，强制中止所有正在连接的http请求\nXHR.prototype._onDisconnect = function (isrecon) {\n    if (this._xhr) {\n        this._xhr.onreadystatechange = this._xhr.onload = empty;\n        this._xhr.abort();\n        this._xhr = null;\n    }\n    if (this._sendXhr) {\n        this._sendXhr.onreadystatechange = this._sendXhr.onload = empty;\n        this._sendXhr.abort();\n        this._sendXhr = null;\n    }\n    if (isrecon === undefined) {\n        Transport.prototype._onDisconnect.call(this);\n    }\n};\n//打开跨域请求对象\nXHR.prototype._request = function (url, method, multipart) {\n    var req = request();\n    if (multipart)\n        req.multipart = true;\n    req.open(method || 'GET', \"http://\" + url);\n    if (method == 'POST' && 'setRequestHeader' in req) {\n        req.setRequestHeader('Content-type', 'application/x-www-form-urlencoded; charset=utf-8');\n    }\n    return req;\n};\nXHR.check = function () {\n    try {\n        if (request())\n            return true;\n    } catch (e) {\n    }\n    return false;\n};\nXHR.XDomainCheck = function () {\n    return XHR.check();\n};\nXHR.request = request;\nvar XHRPolling = Transport['xhr-polling'] = function () {\n    Transport.XHR.apply(this, arguments);\n};\nutil.inherit(XHRPolling, Transport.XHR);\nXHRPolling.prototype.type = 'xhr-polling';\n//链接服务器，如果是ios和安卓就等10毫秒执行。\nXHRPolling.prototype.connect = function (x) {\n    if (util.ios || util.android) {\n        var self = this;\n        util.load(function () {\n            setTimeout(function () {\n                Transport.XHR.prototype.connect.call(self, x);\n            }, 10);\n        });\n    } else {\n        Transport.XHR.prototype.connect.call(this, x);\n    }\n};\n//发送pullmsg.js请求，这里是一个死循环调用。用于保持pullmsg.js请求\nXHRPolling.prototype.onopen = function (a, b) {\n    this._onData(a, b);\n    if (/\"headerCode\":-32,/.test(a)) {\n        return;\n    }\n    this._get(mapping.Endpoint.host + \"/pullmsg.js?sessionid=\" + util.cookieHelper.getItem(mapping.Endpoint.userId + \"sId\"), true);\n};\n//http状态码对应执行对象\nvar status = {\n    //arg参数有值说明是链接服务器请求，直接_onConnect方法\n    200: function (self, text, arg) {\n        var txt = text.match(/\"sessionid\":\"\\S+?(?=\")/);\n        self.onopen(text, txt ? txt[0].slice(13) : void 0);\n        arg || self._onConnect();\n    },\n    //http状态码为400，断开连接\n    400: function (self) {\n        util.cookieHelper.removeItem(mapping.Endpoint.userId + \"sId\");\n        self._onDisconnect(true);\n        self._baseConnect();\n    }\n};\n//用于接收pullmsg.js请求中服务器返回的消息数据\nXHRPolling.prototype._get = function (symbol, arg) {\n    var self = this;\n    this._xhr = this._request(symbol, 'GET');\n    if (\"onload\" in this._xhr) {\n        this._xhr.onload = function () {\n            this.onload = empty;\n            if (this.responseText == 'lost params') {\n                status['400'](self);\n            } else {\n                status['200'](self, this.responseText, arg);\n            }\n        };\n        this._xhr.onerror = function () {\n            self._onDisconnect();\n        }\n    } else {\n        this._xhr.onreadystatechange = function () {\n            if (this.readyState == 4) {\n                this.onreadystatechange = empty;\n                if (/^(200|202)$/.test(this.status)) {\n                    status['200'](self, this.responseText, arg);\n                } else if (/^(400|403)$/.test(this.status)) {\n                    status['400'](self);\n                } else {\n                    self._onDisconnect();\n                }\n            }\n        };\n    }\n    this._xhr.send();\n};\nXHRPolling.check = function () {\n    return Transport.XHR.check();\n};\nXHRPolling.XDomainCheck = function () {\n    return Transport.XHR.XDomainCheck();\n};\nmodule.exports = XHRPolling;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/io/polling.js\n ** module id = 23\n ** module chunks = 0\n **/","var mapping = require('../mapping');\nvar msgEnum = require('../message/msgEnum');\nvar factory = require('../io/factory');\nvar tool = require('../tool');\nfunction Channel(address, cb, self) {\n    //连接服务器\n    this.context = self;\n    this.socket = factory(address.host +\n        \"/websocket?appId=\" + this.context.appId +\n        \"&token=\" + encodeURIComponent(this.context.token) +\n        \"&sdkVer=\" + this.context.sdkVer +\n        \"&apiVer=\" + this.context.apiVer,\n        cb);\n    //注册状态改变观察者\n    if (\"onChanged\" in mapping._ConnectionStatusListener) {\n        this.socket.on(\"StatusChanged\", function (code) {\n            //如果参数为DisconnectionStatus，就停止心跳，其他的不停止心跳。每3min连接一次服务器\n            if (code instanceof msgEnum.DisconnectionStatus) {\n                mapping._ConnectionStatusListener.onChanged(RongIMClient.ConnectionStatus.setValue(code + 2));\n                self.clearHeartbeat();\n                return;\n            }\n            mapping._ConnectionStatusListener.onChanged(RongIMClient.ConnectionStatus.setValue(code))\n        })\n    } else {\n        throw new Error(\"setConnectStatusListener:Parameter format is incorrect\")\n    }\n    //注册message观察者\n    this.socket.on(\"message\", this.context.handler.handleMessage);\n//注册断开连接观察者\n    var that = this;\n    this.socket.on(\"disconnect\", function () {\n        that.socket.fire(\"StatusChanged\", 4);\n    });\n}\n//发送，如果通道可写就发送，不可写就重连服务器\nChannel.prototype.writeAndFlush = function (val) {\n    var that = this;\n    if (this.isWritable()) {\n        this.socket.send(val);\n    } else {\n        this.reconnect({\n            onSuccess: function () {\n                that.socket.send(val);\n            },\n            onError: function () {\n                throw new Error(\"reconnect fail\")\n            }\n        })\n    }\n};\n//重连并清空messageid\nChannel.prototype.reconnect = function (callback) {\n    tool.messageIdHandler.clearMessageId();\n    this.socket = this.socket.reconnect();\n    if (callback) {\n        mapping.reconnectSet = callback;\n    }\n};\nChannel.prototype.disconnect = function (x) {\n    this.socket.disconnect(x);\n};\n//通道是否可写\nChannel.prototype.isWritable = function () {\n    return this.socket.connected || this.socket.connecting;\n};\nmodule.exports = Channel;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/core/channel.js\n ** module id = 24\n ** module chunks = 0\n **/","var MD5 = function (e) {\n    function n(d) {\n        for (var a = 0, b = \"\"; 3 >= a; a++)b += \"0123456789abcdef\".charAt(d >> 8 * a + 4 & 15) + \"0123456789abcdef\".charAt(d >> 8 * a & 15);\n        return b\n    }\n\n    function m(a, b) {\n        var d = (a & 65535) + (b & 65535);\n        return (a >> 16) + (b >> 16) + (d >> 16) << 16 | d & 65535\n    }\n\n    function h(a, b, d, c, e, f) {\n        a = m(m(b, a), m(c, f));\n        return m(a << e | a >>> 32 - e, d)\n    }\n\n    function g(a, b, d, c, e, f, g) {\n        return h(b & d | ~b & c, a, b, e, f, g)\n    }\n\n    function k(a, b, d, c, e, f, g) {\n        return h(b & c | d & ~c, a, b, e, f, g)\n    }\n\n    function l(a, b, d, c, e, f, g) {\n        return h(d ^ (b | ~c), a, b, e, f, g)\n    }\n\n    e = function (a) {\n        for (var b =\n            (a.length + 8 >> 6) + 1, d = Array(16 * b), c = 0; c < 16 * b; c++)d[c] = 0;\n        for (c = 0; c < a.length; c++)d[c >> 2] |= a.charCodeAt(c) << c % 4 * 8;\n        d[c >> 2] |= 128 << c % 4 * 8;\n        d[16 * b - 2] = 8 * a.length;\n        return d\n    }(e);\n    for (var d = 1732584193, a = -271733879, b = -1732584194, c = 271733878, f = 0; f < e.length; f += 16)var p = d, q = a, r = b, t = c, d = g(d, a, b, c, e[f + 0], 7, -680876936), c = g(c, d, a, b, e[f + 1], 12, -389564586), b = g(b, c, d, a, e[f + 2], 17, 606105819), a = g(a, b, c, d, e[f + 3], 22, -1044525330), d = g(d, a, b, c, e[f + 4], 7, -176418897), c = g(c, d, a, b, e[f + 5], 12, 1200080426), b = g(b, c, d, a, e[f + 6], 17, -1473231341),\n        a = g(a, b, c, d, e[f + 7], 22, -45705983), d = g(d, a, b, c, e[f + 8], 7, 1770035416), c = g(c, d, a, b, e[f + 9], 12, -1958414417), b = g(b, c, d, a, e[f + 10], 17, -42063), a = g(a, b, c, d, e[f + 11], 22, -1990404162), d = g(d, a, b, c, e[f + 12], 7, 1804603682), c = g(c, d, a, b, e[f + 13], 12, -40341101), b = g(b, c, d, a, e[f + 14], 17, -1502002290), a = g(a, b, c, d, e[f + 15], 22, 1236535329), d = k(d, a, b, c, e[f + 1], 5, -165796510), c = k(c, d, a, b, e[f + 6], 9, -1069501632), b = k(b, c, d, a, e[f + 11], 14, 643717713), a = k(a, b, c, d, e[f + 0], 20, -373897302), d = k(d, a, b, c, e[f + 5], 5, -701558691), c = k(c, d, a, b, e[f + 10], 9, 38016083),\n        b = k(b, c, d, a, e[f + 15], 14, -660478335), a = k(a, b, c, d, e[f + 4], 20, -405537848), d = k(d, a, b, c, e[f + 9], 5, 568446438), c = k(c, d, a, b, e[f + 14], 9, -1019803690), b = k(b, c, d, a, e[f + 3], 14, -187363961), a = k(a, b, c, d, e[f + 8], 20, 1163531501), d = k(d, a, b, c, e[f + 13], 5, -1444681467), c = k(c, d, a, b, e[f + 2], 9, -51403784), b = k(b, c, d, a, e[f + 7], 14, 1735328473), a = k(a, b, c, d, e[f + 12], 20, -1926607734), d = h(a ^ b ^ c, d, a, e[f + 5], 4, -378558), c = h(d ^ a ^ b, c, d, e[f + 8], 11, -2022574463), b = h(c ^ d ^ a, b, c, e[f + 11], 16, 1839030562), a = h(b ^ c ^ d, a, b, e[f + 14], 23, -35309556), d = h(a ^ b ^ c, d, a, e[f +\n        1], 4, -1530992060), c = h(d ^ a ^ b, c, d, e[f + 4], 11, 1272893353), b = h(c ^ d ^ a, b, c, e[f + 7], 16, -155497632), a = h(b ^ c ^ d, a, b, e[f + 10], 23, -1094730640), d = h(a ^ b ^ c, d, a, e[f + 13], 4, 681279174), c = h(d ^ a ^ b, c, d, e[f + 0], 11, -358537222), b = h(c ^ d ^ a, b, c, e[f + 3], 16, -722521979), a = h(b ^ c ^ d, a, b, e[f + 6], 23, 76029189), d = h(a ^ b ^ c, d, a, e[f + 9], 4, -640364487), c = h(d ^ a ^ b, c, d, e[f + 12], 11, -421815835), b = h(c ^ d ^ a, b, c, e[f + 15], 16, 530742520), a = h(b ^ c ^ d, a, b, e[f + 2], 23, -995338651), d = l(d, a, b, c, e[f + 0], 6, -198630844), c = l(c, d, a, b, e[f + 7], 10, 1126891415), b = l(b, c, d, a, e[f + 14], 15,\n            -1416354905), a = l(a, b, c, d, e[f + 5], 21, -57434055), d = l(d, a, b, c, e[f + 12], 6, 1700485571), c = l(c, d, a, b, e[f + 3], 10, -1894986606), b = l(b, c, d, a, e[f + 10], 15, -1051523), a = l(a, b, c, d, e[f + 1], 21, -2054922799), d = l(d, a, b, c, e[f + 8], 6, 1873313359), c = l(c, d, a, b, e[f + 15], 10, -30611744), b = l(b, c, d, a, e[f + 6], 15, -1560198380), a = l(a, b, c, d, e[f + 13], 21, 1309151649), d = l(d, a, b, c, e[f + 4], 6, -145523070), c = l(c, d, a, b, e[f + 11], 10, -1120210379), b = l(b, c, d, a, e[f + 2], 15, 718787259), a = l(a, b, c, d, e[f + 9], 21, -343485551), d = m(d, p), a = m(a, q), b = m(b, r), c = m(c, t);\n    return n(d) +\n        n(a) + n(b) + n(c)\n};\nmodule.exports = MD5;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/md5.js\n ** module id = 25\n ** module chunks = 0\n **/","var global = window;\nvar tool = require('./tool');\nvar mappding = require('./mapping');\nvar config = {\n    canFlashWidget: (function () {\n        if ('navigator' in global && 'plugins' in navigator && navigator.plugins['Shockwave Flash']) {\n            return !!navigator.plugins['Shockwave Flash'].description;\n        }\n        if ('ActiveXObject' in global) {\n            try {\n                return !!new ActiveXObject('ShockwaveFlash.ShockwaveFlash').GetVariable('$version');\n            } catch (e) {\n            }\n        }\n        return false;\n    })(),\n    supportedWebSocket: function () {\n        return \"WebSocket\" in global && \"ArrayBuffer\" in global && WebSocket.prototype.CLOSED === 3 && !mappding.globalConf.WEB_SOCKET_FORCE_FLASH && !mappding.globalConf.WEB_XHR_POLLING;\n    },\n    supportedFlash: function () {\n        return !/opera/i.test(navigator.userAgent) && !mappding.globalConf.WEB_XHR_POLLING && this.canFlashWidget\n    }\n};\n// 程序入口\ntool.ready(function () {\n    var src = '';\n    //此属性为通道标识。根据这个标识生产通道对象，默认为websocket\n    tool.setTransportType('websocket');\n    //当前浏览器是否支持webSocket，并且window.WEB_SOCKET_FORCE_FLASH 和 !window.WEB_XHR_POLLING都是false\n    if (config.supportedWebSocket()) {\n        //加载protobuf\n        src = \"http://res.websdk.rongcloud.cn/protobuf-0.2.min.js\";\n        //是否支持flash widget\n    } else if (config.supportedFlash()) {\n        //加载flash widget帮助库\n        src = \"http://res.websdk.rongcloud.cn/swfobject-0.2.min.js\";\n    } else {\n        //如果上述条件都不支持则执行comet逻辑\n        tool.setTransportType('xhr-polling');\n        //加载comet帮助库\n        src = \"http://res.websdk.rongcloud.cn/xhrpolling-0.2.min.js\";\n    }\n    tool.loadScript(src);\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/ready.js\n ** module id = 26\n ** module chunks = 0\n **/","var RongIMClient=require('./RongIMClient');\nvar tool=require('../tool');\n//把具体的消息类型转化为protobuf格式的类\nRongIMClient.MessageContent = function (f) {\n    if (!(f instanceof RongIMClient.RongIMMessage)) {\n        throw new Error(\"wrong parameter\")\n    }\n};\nRongIMClient.MessageContent.prototype.getMessage = function () {\n    return f\n};\nRongIMClient.MessageContent.prototype.encode = function () {\n    var c = new Modules.UpStreamMessage();\n    c.setSessionId(0);\n    c.setClassname(f.getObjectName());\n    c.setContent(tool.JSON.stringify(f.getDetail()));\n    var val = c.toArrayBuffer();\n    if (Object.prototype.toString.call(val) == \"[object ArrayBuffer]\") {\n        return [].slice.call(new Int8Array(val))\n    }\n    return val\n};\n//发送中处理消息的类，sendMessage方法的第三个参数就是这个对象\nRongIMClient.MessageHandler = function (a) {\n    if (typeof a == \"function\") {\n        this.process = a;\n    } else {\n        throw new Error(\"MessageHandler:arguments type is error\")\n    }\n};\n//接收状态\nRongIMClient.ReceivedStatus = function (d) {\n    var a = d || 1;\n    this.getFlag = function () {\n        return a\n    };\n    this.isDownload = function () {\n        return a == 1\n    };\n    this.isListened = function () {\n        return a == 2\n    };\n    this.isRead = function () {\n        return a == 3\n    };\n    this.setDownload = function () {\n        a = 1\n    };\n    this.setListened = function () {\n        a = 2\n    };\n    this.setRead = function () {\n        a = 3\n    };\n};\n//用户信息\nRongIMClient.UserInfo = function (h, l, a) {\n    var k = h,\n        j = l,\n        i = a;\n    this.getUserName = function () {\n        return j\n    };\n    this.getPortraitUri = function () {\n        return i\n    };\n    this.getUserId = function () {\n        return k\n    };\n    this.setUserName = function (c) {\n        j = c\n    };\n    this.setPortraitUri = function (c) {\n        i = c\n    };\n    this.setUserId = function (c) {\n        k = c\n    }\n};\n//会话信息\nRongIMClient.Conversation = function () {\n    var s = this,\n        a = (new Date).getTime(),\n        D, v, B, w, E, G, t, F, y, C, A, H, x, u = 0, por,\n        z = RongIMClient.ConversationNotificationStatus.NOTIFY;\n    this.getConversationTitle = function () {\n        return G\n    };\n    this.toJSON = function () {\n        var c = {\n            \"senderUserName\": E,\n            lastTime: a,\n            \"objectName\": D,\n            \"senderUserId\": v,\n            \"receivedTime\": B,\n            \"conversationTitle\": G,\n            \"conversationType\": t,\n            \"latestMessageId\": C,\n            \"sentTime\": H,\n            \"targetId\": x,\n            \"notificationStatus\": z\n        };\n        return tool.JSON.stringify(c)\n    };\n    this.setReceivedStatus = function (c) {\n        w = c\n    };\n    this.getReceivedStatus = function () {\n        return w\n    };\n    this.getConversationType = function () {\n        return t\n    };\n    this.getDraft = function () {\n        return F\n    };\n    this.getLatestMessage = function () {\n        return y\n    };\n    this.getLatestMessageId = function () {\n        return C\n    };\n    this.getNotificationStatus = function () {\n        return z\n    };\n    this.getObjectName = function () {\n        return D\n    };\n    this.getReceivedTime = function () {\n        return B\n    };\n    this.getSenderUserId = function () {\n        return v\n    };\n    this.getSentStatus = function () {\n        return A\n    };\n    this.getSentTime = function () {\n        return H\n    };\n    this.getTargetId = function () {\n        return x\n    };\n    this.getUnreadMessageCount = function () {\n        return u\n    };\n    this.isTop = function () {\n        var e = RongIMClient.getInstance().getConversationList();\n        return e[0] != undefined && e[0].getTargetId() == this.getTargetId() && e[0].getConversationType() == this.getConversationType();\n    };\n    this.setConversationTitle = function (c) {\n        G = c\n    };\n    this.getConversationPortrait = function () {\n        return por;\n    };\n    this.setConversationPortrait = function (p) {\n        por = p;\n    };\n    this.setConversationType = function (c) {\n        t = c\n    };\n    this.setDraft = function (c) {\n        F = c\n    };\n    this.setSenderUserName = function (c) {\n        E = c\n    };\n    this.setLatestMessage = function (c) {\n        y = c\n    };\n    this.setLatestMessageId = function (c) {\n        C = c\n    };\n    this.setNotificationStatus = function (c) {\n        z = c instanceof RongIMClient.ConversationNotificationStatus ? c : RongIMClient.ConversationNotificationStatus.setValue(c);\n    };\n    this.setObjectName = function (c) {\n        D = c\n    };\n    this.setReceivedTime = function (c) {\n        a = B = c\n    };\n    this.setSenderUserId = function (c) {\n        v = c\n    };\n    this.getLatestTime = function () {\n        return a\n    };\n    this.setSentStatus = function (c) {\n        return !!(A = c)\n    };\n    this.setSentTime = function (c) {\n        a = H = c\n    };\n    this.setTargetId = function (c) {\n        x = c\n    };\n    this.setTop = function () {\n        if (s.getTargetId() == undefined || this.isTop()) {\n            return\n        }\n        RongIMClient.getInstance().getConversationList().add(this);\n    };\n    this.setUnreadMessageCount = function (c) {\n        u = c\n    }\n};\n//讨论组信息\nRongIMClient.Discussion = function (m, l, a, q, p) {\n    var s = m,\n        t = l,\n        r = a,\n        o = q,\n        n = p;\n    this.getCreatorId = function () {\n        return r\n    };\n    this.getId = function () {\n        return s\n    };\n    this.getMemberIdList = function () {\n        return n\n    };\n    this.getName = function () {\n        return t\n    };\n    this.isOpen = function () {\n        return o\n    };\n    this.setCreatorId = function (c) {\n        r = c\n    };\n    this.setId = function (c) {\n        s = c\n    };\n    this.setMemberIdList = function (c) {\n        n = c\n    };\n    this.setName = function (c) {\n        t = c\n    };\n    this.setOpen = function (c) {\n        o = !!c\n    }\n};\n//群信息\nRongIMClient.Group = function (j, l, a) {\n    var h = j,\n        k = l,\n        i = a;\n    this.getId = function () {\n        return h\n    };\n    this.getName = function () {\n        return k\n    };\n    this.getPortraitUri = function () {\n        return i\n    };\n    this.setId = function (c) {\n        h = c\n    };\n    this.setName = function (c) {\n        k = c\n    };\n    this.setPortraitUri = function (c) {\n        i = c\n    }\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/IMClient/affiliatedMessage.js\n ** module id = 27\n ** module chunks = 0\n **/","var RongIMClient=require('./RongIMClient');\nvar tool=require('../tool');\n//消息基类，此类是对安卓消息基类的重新实现\nRongIMClient.RongIMMessage = function (content) {\n    var x = \"unknown\",\n        u, z = content || {},\n        o, q, t, y, a, p, s, v, r;\n    this.getDetail = function () {\n        return z;\n    };\n    this.getMessageTag = function () {\n        return [RongIMClient.MessageTag.ISPERSISTED, RongIMClient.MessageTag.ISCOUNTED, RongIMClient.MessageTag.ISDISPLAYED];\n    };\n    this.getContent = function () {\n        return z.content\n    };\n    this.getConversationType = function () {\n        return o\n    };\n    this.getExtra = function () {\n        return z.extra;\n    };\n    this.getMessageDirection = function () {\n        return q\n    };\n    this.getMessageId = function () {\n        return t\n    };\n    this.getObjectName = function () {\n        return y\n    };\n    this.getReceivedStatus = function () {\n        return a\n    };\n    this.getReceivedTime = function () {\n        return u\n    };\n    this.getSenderUserId = function () {\n        return p\n    };\n    this.getSentStatus = function () {\n        return s\n    };\n    this.getTargetId = function () {\n        return r\n    };\n    this.setContent = function (c, d) {\n        z[d || \"content\"] = c\n    };\n    this.setConversationType = function (c) {\n        o = c\n    };\n    this.setExtra = function (c) {\n        z.extra = c;\n    };\n    this.setMessageDirection = function (c) {\n        q = c\n    };\n    this.setMessageId = function (c) {\n        t = c\n    };\n    this.setObjectName = function (c) {\n        y = c\n    };\n    this.setReceivedStatus = function (c) {\n        a = c\n    };\n    this.setSenderUserId = function (c) {\n        p = c\n    };\n    this.setSentStatus = function (c) {\n        return !!(s = c)\n    };\n    this.setSentTime = function (c) {\n        v = tool.int64ToTimestamp(c);\n    };\n    this.getSentTime = function () {\n        return v;\n    };\n    this.setTargetId = function (c) {\n        r = c\n    };\n    this.setReceivedTime = function (c) {\n        u = c\n    };\n    this.toJSON = function () {\n        var c = {\n            \"receivedTime\": u,\n            \"messageType\": x,\n            \"details\": z,\n            \"conversationType\": o,\n            \"direction\": q,\n            \"messageId\": t,\n            \"objectName\": y,\n            \"senderUserId\": p,\n            \"sendTime\": v,\n            \"targetId\": r\n        };\n        return tool.JSON.stringify(c)\n    };\n    this.getMessageType = function () {\n        return x\n    };\n    this.setMessageType = function (c) {\n        x = c\n    }\n};\n//通知类型消息基类，继承自RongIMMessage\nRongIMClient.NotificationMessage = function (c) {\n    RongIMClient.RongIMMessage.call(this, c);\n    this.getMessageTag = function () {\n        return [RongIMClient.MessageTag.ISPERSISTED, RongIMClient.MessageTag.ISDISPLAYED];\n    };\n};\ntool.inherit(RongIMClient.NotificationMessage, RongIMClient.RongIMMessage, true);\n//状态类型消息基类，继承自RongIMMessage\nRongIMClient.StatusMessage = function (c) {\n    RongIMClient.RongIMMessage.call(this, c);\n    this.getMessageTag = function () {\n        return ['NONE'];\n    };\n};\ntool.inherit(RongIMClient.StatusMessage, RongIMClient.RongIMMessage, true);\n//文本消息\nRongIMClient.TextMessage = function (c) {\n    RongIMClient.RongIMMessage.call(this, c);\n    this.setMessageType(RongIMClient.MessageType.TextMessage);\n    this.setObjectName(\"RC:TxtMsg\");\n};\nRongIMClient.TextMessage.obtain = function (text) {\n    return new RongIMClient.TextMessage({\n        content: text,\n        extra: \"\"\n    })\n};\ntool.inherit(RongIMClient.TextMessage, RongIMClient.RongIMMessage, true);\n//图片消息\nRongIMClient.ImageMessage = function (c) {\n    RongIMClient.RongIMMessage.call(this, c);\n    this.setMessageType(RongIMClient.MessageType.ImageMessage);\n    this.setObjectName(\"RC:ImgMsg\");\n    this.setImageUri = function (a) {\n        this.setContent(a, \"imageUri\")\n    };\n    this.getImageUri = function () {\n        return this.getDetail().imageUri\n    };\n};\nRongIMClient.ImageMessage.obtain = function (content, imageUri) {\n    return new RongIMClient.ImageMessage({\n        content: content,\n        imageUri: imageUri,\n        extra: \"\"\n    });\n};\ntool.inherit(RongIMClient.ImageMessage, RongIMClient.RongIMMessage, true);\n//图文消息\nRongIMClient.RichContentMessage = function (c) {\n    RongIMClient.RongIMMessage.call(this, c);\n    this.setMessageType(RongIMClient.MessageType.RichContentMessage);\n    this.setObjectName(\"RC:ImgTextMsg\");\n    this.setTitle = function (a) {\n        this.setContent(a, \"title\")\n    };\n    this.getTitle = function () {\n        return this.getDetail().title;\n    };\n    this.setImageUri = function (a) {\n        this.setContent(a, \"imageUri\")\n    };\n    this.getImageUri = function () {\n        return this.getDetail().imageUri;\n    };\n};\nRongIMClient.RichContentMessage.obtain = function (title, content, imageUri) {\n    return new RongIMClient.RichContentMessage({\n        title: title,\n        content: content,\n        imageUri: imageUri,\n        extra: \"\"\n    })\n};\ntool.inherit(RongIMClient.RichContentMessage, RongIMClient.RongIMMessage, true);\n//音频消息\nRongIMClient.VoiceMessage = function (c) {\n    RongIMClient.RongIMMessage.call(this, c);\n    this.setObjectName(\"RC:VcMsg\");\n    this.setMessageType(RongIMClient.MessageType.VoiceMessage);\n    this.setDuration = function (a) {\n        this.setContent(a, \"duration\")\n    };\n    this.getDuration = function () {\n        return this.getDetail().duration;\n    };\n};\nRongIMClient.VoiceMessage.obtain = function (content, duration) {\n    return new RongIMClient.VoiceMessage({\n        content: content,\n        duration: duration,\n        extra: \"\"\n    })\n};\ntool.inherit(RongIMClient.VoiceMessage, RongIMClient.RongIMMessage, true);\n//客服握手消息\nRongIMClient.HandshakeMessage = function () {\n    RongIMClient.RongIMMessage.call(this);\n    this.setMessageType(RongIMClient.MessageType.HandshakeMessage);\n    this.setObjectName(\"RC:HsMsg\");\n};\ntool.inherit(RongIMClient.HandshakeMessage, RongIMClient.RongIMMessage, true);\n//中断客服消息\nRongIMClient.SuspendMessage = function () {\n    RongIMClient.RongIMMessage.call(this);\n    this.setMessageType(RongIMClient.MessageType.SuspendMessage);\n    this.setObjectName(\"RC:SpMsg\");\n};\ntool.inherit(RongIMClient.SuspendMessage, RongIMClient.RongIMMessage, true);\n//未知消息\nRongIMClient.UnknownMessage = function (c, o) {\n    RongIMClient.RongIMMessage.call(this, c);\n    this.setMessageType(RongIMClient.MessageType.UnknownMessage);\n    this.setObjectName(o);\n};\ntool.inherit(RongIMClient.UnknownMessage, RongIMClient.RongIMMessage, true);\n//地理位置消息\nRongIMClient.LocationMessage = function (c) {\n    RongIMClient.RongIMMessage.call(this, c);\n    this.setMessageType(RongIMClient.MessageType.LocationMessage);\n    this.setObjectName(\"RC:LBSMsg\");\n    this.setLatitude = function (a) {\n        this.setContent(a, \"latitude\")\n    };\n    this.getLatitude = function () {\n        return this.getDetail().latitude;\n    };\n    this.setLongitude = function (a) {\n        this.setContent(a, \"longitude\")\n    };\n    this.getLongitude = function () {\n        return this.getDetail().longitude;\n    };\n    this.setPoi = function (a) {\n        this.setContent(a, \"poi\")\n    };\n    this.getPoi = function () {\n        return this.getDetail().poi;\n    };\n};\nRongIMClient.LocationMessage.obtain = function (content, latitude, longitude, poi) {\n    return new RongIMClient.LocationMessage({\n        content: content,\n        latitude: latitude,\n        longitude: longitude,\n        poi: poi,\n        extra: \"\"\n    })\n};\ntool.inherit(RongIMClient.LocationMessage, RongIMClient.RongIMMessage, true);\n//讨论组通知消息\nRongIMClient.DiscussionNotificationMessage = function (c) {\n    RongIMClient.NotificationMessage.call(this, c);\n    this.setMessageType(RongIMClient.MessageType.DiscussionNotificationMessage);\n    this.setObjectName(\"RC:DizNtf\");\n    var isReceived = false;\n    this.getExtension = function () {\n        return this.getDetail().extension;\n    };\n    this.getOperator = function () {\n        return this.getDetail().operator;\n    };\n    this.getType = function () {\n        return this.getDetail().type;\n    };\n    this.isHasReceived = function () {\n        return isReceived;\n    };\n    this.setExtension = function (a) {\n        this.setContent(a, \"extension\")\n    };\n    this.setHasReceived = function (x) {\n        isReceived = !!x;\n    };\n    this.setOperator = function (a) {\n        this.setContent(a, \"operator\")\n    };\n    this.setType = function (a) {\n        this.setContent(a, \"type\");\n        //1:加入讨论组 2：退出讨论组 3:讨论组改名 4：讨论组群主T人\n    };\n};\ntool.inherit(RongIMClient.DiscussionNotificationMessage, RongIMClient.NotificationMessage, true);\n//信息通知消息，继承自NotificationMessage\nRongIMClient.InformationNotificationMessage = function (c) {\n    RongIMClient.NotificationMessage.call(this, c);\n    this.setMessageType(RongIMClient.MessageType.InformationNotificationMessage);\n    this.setObjectName(\"RC:InfoNtf\");\n};\nRongIMClient.InformationNotificationMessage.obtain = function (content) {\n    return new RongIMClient.InformationNotificationMessage({\n        content: content,\n        extra: \"\"\n    })\n};\ntool.inherit(RongIMClient.InformationNotificationMessage, RongIMClient.NotificationMessage, true);\n//加删好友消息\nRongIMClient.ContactNotificationMessage = function (c) {\n    RongIMClient.NotificationMessage.call(this, c);\n    this.setMessageType(RongIMClient.MessageType.ContactNotificationMessage);\n    this.setObjectName(\"RC:ContactNtf\");\n    this.getOperation = function () {\n        return this.getDetail().operation;\n    };\n    this.setOperation = function (o) {\n        this.setContent(o, 'operation');\n    };\n    this.setMessage = function (m) {\n        this.setContent(m, 'message');\n    };\n    this.getMessage = function () {\n        return this.getDetail().message;\n    };\n    this.getSourceUserId = function () {\n        return this.getDetail().sourceUserId;\n    };\n    this.setSourceUserId = function (m) {\n        this.setContent(m, 'sourceUserId');\n    };\n    this.getTargetUserId = function () {\n        return this.getDetail().targetUserId;\n    };\n    this.setTargetUserId = function (m) {\n        this.setContent(m, 'targetUserId');\n    };\n};\nRongIMClient.ContactNotificationMessage.obtain = function (operation, sourceUserId, targetUserId, message) {\n    return new RongIMClient.ContactNotificationMessage({\n        operation: operation,\n        sourceUserId: sourceUserId,\n        targetUserId: targetUserId,\n        message: message,\n        extra: \"\"\n    });\n};\n//允许加好友\nRongIMClient.ContactNotificationMessage.CONTACT_OPERATION_ACCEPT_RESPONSE = 'ContactOperationAcceptResponse';\n//拒绝加好友\nRongIMClient.ContactNotificationMessage.CONTACT_OPERATION_REJECT_RESPONSE = 'ContactOperationRejectResponse';\n//发起加好友请求\nRongIMClient.ContactNotificationMessage.CONTACT_OPERATION_REQUEST = 'ContactOperationRequest';\ntool.inherit(RongIMClient.ContactNotificationMessage, RongIMClient.NotificationMessage, true);\n//个人信息通知消息\nRongIMClient.ProfileNotificationMessage = function (c) {\n    RongIMClient.NotificationMessage.call(this, c);\n    this.setMessageType(RongIMClient.MessageType.ProfileNotificationMessage);\n    this.setObjectName(\"RC:ProfileNtf\");\n    this.getOperation = function () {\n        return this.getDetail().operation;\n    };\n    this.setOperation = function (o) {\n        this.setContent(o, 'operation');\n    };\n    this.getData = function () {\n        return this.getDetail().data;\n    };\n    this.setData = function (o) {\n        this.setContent(o, 'data');\n    };\n};\nRongIMClient.ProfileNotificationMessage.obtain = function (operation, data) {\n    return new RongIMClient.ProfileNotificationMessage({\n        operation: operation,\n        data: data,\n        extra: \"\"\n    });\n};\ntool.inherit(RongIMClient.ProfileNotificationMessage, RongIMClient.NotificationMessage, true);\n//命令通知消息\nRongIMClient.CommandNotificationMessage = function (c) {\n    RongIMClient.NotificationMessage.call(this, c);\n    this.setMessageType(RongIMClient.MessageType.CommandNotificationMessage);\n    this.setObjectName(\"RC:CmdNtf\");\n    this.getData = function () {\n        return this.getDetail().data;\n    };\n    this.setData = function (o) {\n        this.setContent(o, \"data\");\n    };\n    this.getName = function () {\n        return this.getDetail().name;\n    };\n    this.setName = function (o) {\n        this.setContent(o, 'name');\n    };\n};\nRongIMClient.CommandNotificationMessage.obtain = function (x, data) {\n    return new RongIMClient.CommandNotificationMessage({\n        name: x,\n        data: data,\n        extra: \"\"\n    });\n};\ntool.inherit(RongIMClient.CommandNotificationMessage, RongIMClient.NotificationMessage, true);\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/IMClient/coustomMessage.js\n ** module id = 28\n ** module chunks = 0\n **/","/**\n * Created by zhangyatao on 16/1/11.\n */\nvar RongIMClient = require('./RongIMClient');\nvar tool = require('../tool');\nvar msgEnum = require('../message/msgEnum');\nvar en = require('../enum');\nvar ConnectionState = msgEnum.ConnectionState;\n//create enum object 枚举对象，详情可参考API文档\nvar _enum = {\n    'MessageTag': {\n        'ISPERSISTED': 'ISPERSISTED',\n        'ISCOUNTED': 'ISCOUNTED',\n        'NONE': 'NONE',\n        'ISDISPLAYED': \"ISDISPLAYED\"\n    },\n    'ConversationNotificationStatus': ['DO_NOT_DISTURB', 'NOTIFY'],\n    'ConversationType': ['CHATROOM', 'CUSTOMER_SERVICE', 'DISCUSSION', 'GROUP', 'PRIVATE', 'SYSTEM'],\n    'SentStatus': ['DESTROYED', 'FAILED', 'READ', 'RECEIVED', 'SENDING', 'SENT'],\n    'DiscussionInviteStatus': ['CLOSED', 'OPENED'],\n    'MediaType': ['AUDIO', 'FILE', 'IMAGE', 'VIDEO'],\n    'MessageDirection': ['RECEIVE', 'SEND'],\n    'MessageType': ['DiscussionNotificationMessage', 'TextMessage', 'ImageMessage', 'VoiceMessage', 'RichContentMessage', 'HandshakeMessage', 'UnknownMessage', 'SuspendMessage', 'LocationMessage', 'InformationNotificationMessage', 'ContactNotificationMessage', 'ProfileNotificationMessage', 'CommandNotificationMessage'],\n    'SendErrorStatus': {\n        'REJECTED_BY_BLACKLIST': 405,\n        'NOT_IN_DISCUSSION': 21406,\n        'NOT_IN_GROUP': 22406,\n        'NOT_IN_CHATROOM': 23406\n    },\n    'BlacklistStatus': ['EXIT_BLACK_LIST', 'NOT_EXIT_BLACK_LIST'],\n    'ConnectionStatus': ['CONNECTED', 'CONNECTING', 'RECONNECT', 'OTHER_DEVICE_LOGIN', 'CLOSURE', 'UNKNOWN_ERROR', 'LOGOUT', 'BLOCK']\n};\n//生产枚举对象\ntool.each(_enum, function (_name, option) {\n    var val = {};\n    if (tool.isArray(option)) {\n        tool.forEach(option, function (x, i) {\n            val[x] = i;\n        })\n    } else {\n        val = option;\n    }\n    RongIMClient[_name] = en(val);\n});\nRongIMClient.ConnectErrorStatus = ConnectionState;\n//回调基类\nRongIMClient.callback = function (d, a) {\n    this.onError = a;\n    this.onSuccess = d\n};\n//回调错误枚举值\nRongIMClient.callback.ErrorCode = en({\n    TIMEOUT: -1,\n    UNKNOWN_ERROR: -2\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/IMClient/IMEnum.js\n ** module id = 29\n ** module chunks = 0\n **/"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvzhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACtnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACxxjehDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpzHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpxlxjeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACxlMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACljZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;","sourceRoot":""}